{
    "version": "https://jsonfeed.org/version/1",
    "title": "悠人的筆記本",
    "description": "CSE 筆記",
    "home_page_url": "https://yuto-0226.github.io",
    "items": [
        {
            "id": "https://yuto-0226.github.io/c-rand/",
            "url": "https://yuto-0226.github.io/c-rand/",
            "title": "C語言rand()函式的用法",
            "date_published": "2022-11-21T15:09:10.000Z",
            "content_html": "<h1 id=\"stdlibh\"><a class=\"anchor\" href=\"#stdlibh\">#</a> stdlib.h</h1>\n<h2 id=\"rand\"><a class=\"anchor\" href=\"#rand\">#</a> rand()</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>產生介於 0~RAND_MAX (=32767) 之間的隨機亂數，需要透過 srand () 來初始化</p>\n<h2 id=\"srand\"><a class=\"anchor\" href=\"#srand\">#</a> srand()</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>透過傳進來的 seed 初始化 rand ()，seed 若不改變則每次所產生的亂數皆會相同。</p>\n<h1 id=\"timeh\"><a class=\"anchor\" href=\"#timeh\">#</a> time.h</h1>\n<h2 id=\"time\"><a class=\"anchor\" href=\"#time\">#</a> time()</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">time_t</span><span class=\"token operator\">*</span> timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>time(NULL)</code>  會回傳自 1970 年午夜到現在所經過的秒數，可以用作 <code>srand</code>  的 seed，每次執行的 seed 皆會不一樣</p>\n<h1 id=\"rand-scaled-and-shifted\"><a class=\"anchor\" href=\"#rand-scaled-and-shifted\">#</a> rand() scaled and shifted</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">scale_rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> start<span class=\"token operator\">+</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>end<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/latex-packge-missing/",
            "url": "https://yuto-0226.github.io/latex-packge-missing/",
            "title": "Latex 編譯時缺少 .sty 檔案",
            "date_published": "2022-11-20T17:04:43.000Z",
            "content_html": "<p>用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGFuLm9yZy9wa2c=\">CTAN</span> 單獨把遺失的檔案載回來，整個資料夾放回  <code>C:\\texlive\\&lt;年分&gt;\\texmf-dist\\tex\\latex</code> ，然後在 Terminal 裡面 :</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>texhash</pre></td></tr></table></figure>",
            "tags": [
                "Latex",
                "除錯紀錄"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/AP325/0/",
            "url": "https://yuto-0226.github.io/csie/AP325/0/",
            "title": "0.教材說明與預備知識",
            "date_published": "2022-11-18T12:57:16.000Z",
            "content_html": "<h1 id=\"021-基本c模板與輸入輸出\"><a class=\"anchor\" href=\"#021-基本c模板與輸入輸出\">#</a> 0.2.1 基本 C++ 模板與輸入輸出</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span> <span class=\"token comment\">// 萬用標頭檔</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 優化 cin 的東西</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// code here</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有優化 cin 的那兩行就不能再把 cin/cout 與 scanf/printf 混用，不然會發生無法預測的錯誤</p>\n<ul>\n<li>使用 scanf/printf</li>\n<li>使用 cin/cout 並優化</li>\n</ul>\n<h1 id=\"022-程式測試與測試資料\"><a class=\"anchor\" href=\"#022-程式測試與測試資料\">#</a> 0.2.2 程式測試與測試資料</h1>\n<ul>\n<li>stdin: 標準輸入裝置，預設鍵盤</li>\n<li>stdout: 標準輸出裝置，預設螢幕</li>\n<li>stderr: 標準錯誤紀錄裝置，預設螢幕</li>\n</ul>\n<p>unix 環境下的 IO 重導:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>./a.out <span class=\"token operator\">&lt;</span>test.in <span class=\"token operator\">></span>test.out</pre></td></tr></table></figure><p>程式裡面 I/O 重導:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>freopen<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.in\"</span>,<span class=\"token string\">\"r\"</span>,stdin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>freopen<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.out\"</span>,<span class=\"token string\">\"w\"</span>,stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>unix 環境下計時:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">time</span> a.out <span class=\"token operator\">&lt;</span>test.in</pre></td></tr></table></figure><p>程式裡面計時:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    clock_t start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    start<span class=\"token operator\">=</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// code here</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    end<span class=\"token operator\">=</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fprint</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"time from start to end = %f sec.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>CLOCKS_PER_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"023-複雜度估算\"><a class=\"anchor\" href=\"#023-複雜度估算\">#</a> 0.2.3 複雜度估算</h1>\n<h2 id=\"複雜度估算方式\"><a class=\"anchor\" href=\"#複雜度估算方式\">#</a> 複雜度估算方式</h2>\n<p>時間複雜度通常以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 來表示，念作 big-O，以 n 來表示資料量，常數倍通常忽略不計<br />\n常見的有:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"由資料量大小推估所需複雜度\"><a class=\"anchor\" href=\"#由資料量大小推估所需複雜度\">#</a> 由資料量大小推估所需複雜度</h2>\n<p>題目會說明資料量的大小跟時間限制 (time limit)，可以用這兩點去推估時間複雜度<br />\n可以一秒<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span>~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span> 的指令數量來估計</p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>超過 1 萬</th>\n<th>數千</th>\n<th>數百</th>\n<th>20~25</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>複雜度</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"複雜度需要留意的幾件事\"><a class=\"anchor\" href=\"#複雜度需要留意的幾件事\">#</a> 複雜度需要留意的幾件事</h2>\n<ul>\n<li>sort/qsort 可以視為<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>Big-O 通常指的是上限，而未必是緊實的上限 (tight bound)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mi>x</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 在 x 是常數時成立</li>\n</ul>\n<h1 id=\"024-需要留意的是\"><a class=\"anchor\" href=\"#024-需要留意的是\">#</a> 0.2.4 需要留意的是</h1>\n",
            "tags": [
                "筆記",
                "C++",
                "程式競賽"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/zj-d712/",
            "url": "https://yuto-0226.github.io/sol/zj-d712/",
            "title": "d712. The 3n + 1 problem",
            "date_published": "2022-11-13T14:50:34.000Z",
            "content_html": "<h1 id=\"tle解\"><a class=\"anchor\" href=\"#tle解\">#</a> TLE 解</h1>\n<p>用 multimap 的索引會排序的特性把 n 跟 cycle (n) 反著存進 map 裡面</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ZeroJudge d713</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//printf(\"%d \",n);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> len<span class=\"token operator\">=</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span> len<span class=\"token operator\">=</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> mmap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;\" \";</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">=</span><span class=\"token operator\">--</span>mmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>mmap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;</span>a <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">//cout&lt;&lt;(*it).first&lt;&lt;'\\n';</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"線段樹解\"><a class=\"anchor\" href=\"#線段樹解\">#</a> 線段樹解</h1>\n<p>目前測資 2 沒過</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ZeroJudge d713</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//printf(\"%d \",n);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> len<span class=\"token operator\">=</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span> len<span class=\"token operator\">=</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span>Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span>Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Node <span class=\"token operator\">*</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">==</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//if(end&lt;=300) cout&lt;&lt;\"build: [\"&lt;&lt;start&lt;&lt;\", \"&lt;&lt;end&lt;&lt;\"] node->max=\"&lt;&lt;val[start]&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//if(end&lt;=300) cout&lt;&lt;\"build: [\"&lt;&lt;start&lt;&lt;\", \"&lt;&lt;end&lt;&lt;\"]\"&lt;&lt;\" node->max=\"&lt;&lt;max(left->max,right->max)&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>max<span class=\"token punctuation\">,</span>right<span class=\"token operator\">-></span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>root<span class=\"token operator\">-></span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>i<span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">-</span>root<span class=\"token operator\">-></span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;\"query: [\"&lt;&lt;i&lt;&lt;\", \"&lt;&lt;j&lt;&lt;\"] @ [\"&lt;&lt;root->start&lt;&lt;\", \"&lt;&lt;root->end&lt;&lt;\"] root->max=\"&lt;&lt;root->max&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1000002</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">cycle</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Node <span class=\"token operator\">*</span>root<span class=\"token operator\">=</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "ZeroJudge"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/DSA/segment-tree/",
            "url": "https://yuto-0226.github.io/csie/DSA/segment-tree/",
            "title": "[C++]線段樹",
            "date_published": "2022-11-13T12:21:16.000Z",
            "content_html": "<h1 id=\"程式碼\"><a class=\"anchor\" href=\"#程式碼\">#</a> 程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">,</span>Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span>Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Node <span class=\"token operator\">*</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">==</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//cout&lt;&lt;\"build: [\"&lt;&lt;start&lt;&lt;\", \"&lt;&lt;end&lt;&lt;\"] node->,max,min,sum=\"&lt;&lt;val[start]&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Node <span class=\"token operator\">*</span>left<span class=\"token operator\">=</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Node <span class=\"token operator\">*</span>right<span class=\"token operator\">=</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;\"build: [\"&lt;&lt;start&lt;&lt;\", \"&lt;&lt;end&lt;&lt;\"]\"&lt;&lt;\" node->max=\"&lt;&lt;max(left->max,right->max)&lt;&lt;\" node->min=\"&lt;&lt;min(left->min,right->min)&lt;&lt;\" node->sum=\"&lt;&lt;left->sum+right->sum&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>max<span class=\"token punctuation\">,</span>right<span class=\"token operator\">-></span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>min<span class=\"token punctuation\">,</span>right<span class=\"token operator\">-></span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>left<span class=\"token operator\">-></span>sum<span class=\"token operator\">+</span>right<span class=\"token operator\">-></span>sum<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query_sum</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;\"query: [\"&lt;&lt;i&lt;&lt;\", \"&lt;&lt;j&lt;&lt;\"] @ [\"&lt;&lt;root->start&lt;&lt;\", \"&lt;&lt;root->end&lt;&lt;\"] root->sum=\"&lt;&lt;root->sum&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>root<span class=\"token operator\">-></span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>i<span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">-</span>root<span class=\"token operator\">-></span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_sum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_sum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_sum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">query_sum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;\"query: [\"&lt;&lt;i&lt;&lt;\", \"&lt;&lt;j&lt;&lt;\"] @ [\"&lt;&lt;root->start&lt;&lt;\", \"&lt;&lt;root->end&lt;&lt;\"] root->max=\"&lt;&lt;root->max&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>root<span class=\"token operator\">-></span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>i<span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">-</span>root<span class=\"token operator\">-></span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">query_max</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query_min</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//cout&lt;&lt;\"query: [\"&lt;&lt;i&lt;&lt;\", \"&lt;&lt;j&lt;&lt;\"] @ [\"&lt;&lt;root->start&lt;&lt;\", \"&lt;&lt;root->end&lt;&lt;\"] root->min=\"&lt;&lt;root->min&lt;&lt;\"\\n\";</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>root<span class=\"token operator\">-></span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">==</span>i<span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">==</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root<span class=\"token operator\">-></span>min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span>root<span class=\"token operator\">-></span>start<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>end<span class=\"token operator\">-</span>root<span class=\"token operator\">-></span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_min</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>mid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query_min</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">query_min</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">query_min</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "資料結構"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/simple-8bit-cpu/",
            "url": "https://yuto-0226.github.io/csie/simple-8bit-cpu/",
            "title": "用 C++ 模擬簡單的 8-bit cpu",
            "date_published": "2022-11-05T15:13:30.000Z",
            "content_html": "<p>最近在看 beneater 的 8-bit cpu 想說用 C++ 寫看看練練手，所以就寫出來啦～<br />\n 由於還沒對 CPU 理解得很徹底，只有把 ALU 做出來而已，以後再看看會不會在重寫一個哈哈。</p>\n<h1 id=\"架構\"><a class=\"anchor\" href=\"#架構\">#</a> 架構</h1>\n<ul>\n<li>accumulator register</li>\n<li>b register</li>\n<li>instruction register</li>\n<li>program counter</li>\n</ul>\n<h1 id=\"程式碼\"><a class=\"anchor\" href=\"#程式碼\">#</a> 程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> byte<span class=\"token operator\">=</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>byte accumulator<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accumulator register</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>byte b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// register b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>byte instruction<span class=\"token punctuation\">;</span> <span class=\"token comment\">// instruction register</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>byte counter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// program counter</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">bool</span> negitive<span class=\"token punctuation\">;</span> <span class=\"token comment\">// negitive flag</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">bool</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sign flag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">bool</span> HLT<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>byte memory<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0b11110000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">bool</span> isDebug<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    accumulator<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    counter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    instruction<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> memory<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11110000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>HLT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    instruction<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">STA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x STA: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    accumulator<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">STB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x STB: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    b<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x ADD: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    b<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    accumulator<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">OUT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x OUT\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x\\n\"</span><span class=\"token punctuation\">,</span>accumulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    instruction<span class=\"token operator\">/=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x instruction: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0x0001</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// STA</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token function\">STA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0010</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// LDA</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0011</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// STB</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">STB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0100</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// LDB</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0101</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// ADD</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1101</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// OUT</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">OUT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1110</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// HLT</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x HLT\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            HLT<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1111</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// NOP</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x NOP\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_register</span><span class=\"token punctuation\">(</span>byte reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span>reg<span class=\"token operator\">/</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        reg<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_memory</span><span class=\"token punctuation\">(</span>byte address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        memory<span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%4#x  \"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4#x\\n\"</span><span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"register:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"accumulator\"</span><span class=\"token punctuation\">,</span>accumulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"instruction\"</span><span class=\"token punctuation\">,</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// LDA   </span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b01010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ADD</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// HLT</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11100000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>HLT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\">// fetch</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//debug();</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "Computer Architecture",
                "Assembly Language"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/zj-f312/",
            "url": "https://yuto-0226.github.io/sol/zj-f312/",
            "title": "f312. 1.人力分配",
            "date_published": "2022-10-15T03:47:18.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>有一個公司有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 個員工，還有兩個工廠。如果工廠一與工廠二分別有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 與<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 個員工，兩個工廠的收益<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Y_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">Y_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 分別會是</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><msubsup><mi>X</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msub><mi>B</mi><mn>1</mn></msub><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><msub><mi>C</mi><mn>1</mn></msub><mspace linebreak=\"newline\"></mspace><msub><mi>Y</mi><mn>2</mn></msub><mo>=</mo><msub><mi>A</mi><mn>2</mn></msub><msubsup><mi>X</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msub><mi>B</mi><mn>2</mn></msub><msub><mi>X</mi><mn>2</mn></msub><mo>+</mo><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">Y_1=A_1X_1^2+B_1X_1+C_1\\\\\nY_2=A_2X_2^2+B_2X_2+C_2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>請你考慮所有分配員工的方式，找出收益最大的組合，輸出最大收益。<br />\n注意，每個員工皆需分配到其中一個工廠。</p>\n<h2 id=\"輸入格式\"><a class=\"anchor\" href=\"#輸入格式\">#</a> 輸入格式</h2>\n<p>第一行有三個整數<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1,B_1,C_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 第二行有三個整數<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_2,B_2,C_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 第三行有一個正整數 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">1&lt;=n&lt;=100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>)</p>\n<h2 id=\"輸出格式\"><a class=\"anchor\" href=\"#輸出格式\">#</a> 輸出格式</h2>\n<p>輸出最大收益</p>\n<h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>暴力破解法。x1 跟 x2 的關係會是 x2=n-x1，用 for 迴圈把 x1 或 x2 從 1 代到 n 找最大值。</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<p><span class=\"green\">AC</span> (4ms, 336KB)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ZeroJudge f312</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> A1<span class=\"token punctuation\">,</span>B1<span class=\"token punctuation\">,</span>C1<span class=\"token punctuation\">,</span>A2<span class=\"token punctuation\">,</span>B2<span class=\"token punctuation\">,</span>C2<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cin<span class=\"token operator\">>></span>A1<span class=\"token operator\">>></span>B1<span class=\"token operator\">>></span>C1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cin<span class=\"token operator\">>></span>A2<span class=\"token operator\">>></span>B2<span class=\"token operator\">>></span>C2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x1<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>x1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> x2<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> y1<span class=\"token operator\">=</span>A1<span class=\"token operator\">*</span>x1<span class=\"token operator\">*</span>x1<span class=\"token operator\">+</span>B1<span class=\"token operator\">*</span>x1<span class=\"token operator\">+</span>C1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> y2<span class=\"token operator\">=</span>A2<span class=\"token operator\">*</span>x2<span class=\"token operator\">*</span>x2<span class=\"token operator\">+</span>B2<span class=\"token operator\">*</span>x2<span class=\"token operator\">+</span>C2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>y1<span class=\"token operator\">+</span>y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "ZeroJudge"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/nihongo/nihhongo-gogogo/%E6%97%A5%E6%9C%AC%E8%AA%9Egogogo-23/",
            "url": "https://yuto-0226.github.io/nihongo/nihhongo-gogogo/%E6%97%A5%E6%9C%AC%E8%AA%9Egogogo-23/",
            "title": "第二十三課",
            "date_published": "2022-10-11T11:38:00.000Z",
            "content_html": "<p>這一課主要在講表想要的文法</p>\n<h1 id=\"nが欲しい\"><a class=\"anchor\" href=\"#nが欲しい\">#</a> N が欲しい</h1>\n<p>「欲しい」是「い形容詞」，中文是「想要」。用「が」表示「欲しい」的對象。</p>\n<p>📖文法：〔一人称〕は N が欲しいです</p>\n<p>📖文法：〔二人称〕は N が欲しいですか</p>\n<p>「欲しい」只能用於表達自己的感受，不能用在別人身上。ex.○○さんは○○が欲しいです。</p>\n<p>📖文法：〔三人称〕は N が欲しがっています</p>\n<p>用在別人身上的話要用「接尾語」ー「がる」去「い」加上去變成「欲しがる」【Ⅰ 類】，助詞為「を」，在用「～ている」表達現在想要。</p>\n<h1 id=\"ます形たい\"><a class=\"anchor\" href=\"#ます形たい\">#</a> 〔ます形〕たい</h1>\n<p>📖文法：〔一人称〕は N〔ます形〕たいです</p>\n<p>📖文法：〔二人称〕は N〔ます形〕たいですか</p>\n<p>同「~ が欲しい」用於表達自己的感受，切勿用於別人。句尾變化同「い形容詞」。</p>\n<h1 id=\"~が欲しい-vs-~たい\"><a class=\"anchor\" href=\"#~が欲しい-vs-~たい\">#</a> 「～が欲しい」 VS. 「～たい」</h1>\n<p>「～が欲しい」：後面加名詞。</p>\n<p>「～たい」：加上具有動作性的名詞。</p>\n<h1 id=\"三人称的たい\"><a class=\"anchor\" href=\"#三人称的たい\">#</a> 三人称的たい</h1>\n<p>📖文法：〔三人称〕は V たいと言っています</p>\n<p>「〔三人称〕は～と言ます（＝某某人說）」可以用來轉述第三者的話，改成「～ています」則是強調目前 or 最近說的。</p>\n<p>📖文法：〔三人称〕は V たがっています</p>\n<p>也可以用「〔三人称〕は～たがる」表示某某人希望做，「たがる」是由「たい」變化而來屬於【Ⅰ 類】。</p>\n<h1 id=\"其他文法事項\"><a class=\"anchor\" href=\"#其他文法事項\">#</a> 其他文法事項</h1>\n<h2 id=\"上手になりたい\"><a class=\"anchor\" href=\"#上手になりたい\">#</a> 上手になりたい</h2>\n<p>例：日本語が上手になりたいです</p>\n<p>「なる」有變成；成為之意。「上手になる」可以解釋為變得擅長。「上手だ」是屬「な形容詞」，後面接動詞時（「なる」）要轉成副詞形「上手に」。</p>\n<h2 id=\"nになる\"><a class=\"anchor\" href=\"#nになる\">#</a> N になる</h2>\n<p>例：今年の冬、私は母になります<br />\n有 [成為～；當～] 的意思，助詞「に」接名詞後表示變化後的結果</p>\n<h2 id=\"合格する\"><a class=\"anchor\" href=\"#合格する\">#</a> 合格する</h2>\n<p>例：日本語能力試験に合格したいです<br />\n用「に」表示合格的對象</p>\n<h2 id=\"いる\"><a class=\"anchor\" href=\"#いる\">#</a> いる</h2>\n<p>「いる」除了有 [有；在] 的意思外，也有 [住在；待在] 的意思</p>\n<h2 id=\"~までに\"><a class=\"anchor\" href=\"#~までに\">#</a> ～までに</h2>\n<p>「～までに」[在～之前] 表示時間的最後期限。接於名詞或動詞辞書形之後。</p>\n",
            "tags": [
                "日本語"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/asm-dev-seting/",
            "url": "https://yuto-0226.github.io/csie/asm-dev-seting/",
            "title": "組合語言開發環境設定",
            "date_published": "2022-10-10T14:09:59.000Z",
            "content_html": "<p>之前曾經嘗試在 Windows 上學寫組合語言，得到的回饋只有滿滿的問號。編譯過程出現了很多跟在 Linux 上不同的例外，這更證明了學習程式語言不難，難的是設定開發環境。<br />\n山不轉路轉路不轉人轉，我們直接用 WSL 上的環境去開發，就可以直接省去很多只會阻饒你學習的問題。而關於 Windows Terminal 和 WSL 的安裝可以參考<a href=\"./csie/missing-semester/missing-semester-00/\"> Before the Course</a></p>\n<h1 id=\"編譯工具\"><a class=\"anchor\" href=\"#編譯工具\">#</a> 編譯工具</h1>\n<p>回歸正題，編譯組合語言會需要兩個程式:  <code>nasm</code> 、 <code>ld</code> 。 <code>nasm</code>  是用來把 <code>.asm</code>  檔轉成 <code>.o</code>  檔，而 <code>ld</code>  則是再把 <code>.o</code>  轉成可以執行的檔案。</p>\n<h2 id=\"更新-apt\"><a class=\"anchor\" href=\"#更新-apt\">#</a> 更新 apt</h2>\n<p>安裝套件前要把 apt 更新上去，不然有機會會找不到東西安裝冏事發生 (本人我還真的卡了一下)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>WSL</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade</pre></td></tr></table></figure><h2 id=\"nasm\"><a class=\"anchor\" href=\"#nasm\">#</a> nasm</h2>\n<p>其實安裝 NASM 很簡單，直接用 Ubuntu 內建的套件管理包安裝就行了。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>WSL</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nasm</pre></td></tr></table></figure><h2 id=\"ld\"><a class=\"anchor\" href=\"#ld\">#</a> ld</h2>\n<p>ld 的話在 GCC 裡面有內建，所以如果要裝的話要裝 GCC，也就是編譯 C/C++ 的工具。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>WSL</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nasm</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "組合語言"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/kyudo/shahouhassetsu/",
            "url": "https://yuto-0226.github.io/kyudo/shahouhassetsu/",
            "title": "射法八節",
            "date_published": "2022-09-28T11:04:33.000Z",
            "content_html": "<p>射法八節是日本弓道中基本的規則，對其熟悉是非常重要的</p>\n<ul>\n<li><ruby>足踏み<rp> (</rp><rt>あしぶ</rt><rp>)</rp></ruby></li>\n<li><ruby>胴造り<rp> (</rp><rt>どうづく</rt><rp>)</rp></ruby></li>\n<li><ruby>弓構え<rp> (</rp><rt>ゆがま</rt><rp>)</rp></ruby></li>\n<li><ruby>打起し<rp> (</rp><rt>うちおこ</rt><rp>)</rp></ruby></li>\n<li><ruby>引分け<rp> (</rp><rt>ひきわ</rt><rp>)</rp></ruby></li>\n<li><ruby>会<rp> (</rp><rt>かい</rt><rp>)</rp></ruby></li>\n<li><ruby>離れ<rp> (</rp><rt>はな</rt><rp>)</rp></ruby></li>\n<li><ruby>残心<rp> (</rp><rt>ざんしん</rt><rp>)</rp></ruby></li>\n</ul>\n",
            "tags": [
                "弓道",
                "日本文化"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/nihongo/nihhongo-gogogo/%E6%97%A5%E6%9C%AC%E8%AA%9Egogogo-01/",
            "url": "https://yuto-0226.github.io/nihongo/nihhongo-gogogo/%E6%97%A5%E6%9C%AC%E8%AA%9Egogogo-01/",
            "title": "第一課",
            "date_published": "2022-09-27T12:47:41.000Z",
            "content_html": "<h1 id=\"~は~です\"><a class=\"anchor\" href=\"#~は~です\">#</a> ～は～です</h1>\n<p>私は学生です。<span class=\"green\">我是學生</span><br />\n<span class=\"yellow\">は</span>在這種句型作助詞讀作「wa」而不是「ha」，在這邊表示在前面的名詞是整句的主題<br />\n<span class=\"yellow\">です</span>則是表達肯定</p>\n<h1 id=\"~は~ですか\"><a class=\"anchor\" href=\"#~は~ですか\">#</a> ～は～ですか</h1>\n",
            "tags": [
                "日本語"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/missing-semester/missing-semester-01/",
            "url": "https://yuto-0226.github.io/csie/missing-semester/missing-semester-01/",
            "title": "Lecture 1:Course Overview + The Shell",
            "date_published": "2022-09-26T09:30:41.000Z",
            "content_html": "<p>MIT 的教授們所開設的課程。每堂課都有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXNzaW5nLmNzYWlsLm1pdC5lZHUv\">線上筆記</span>可以參考。</p>\n<h1 id=\"the-shell\"><a class=\"anchor\" href=\"#the-shell\">#</a> The Shell</h1>\n<p>當你打開 Shell，統常只會有一行字在做上方，稱作<strong>系統提示 (Shell Prompt)</strong>。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> $</pre></td></tr></table></figure><p>上面有使用者名稱 (user name) 跟現在使用的機器名稱還有現在所在的路徑 (path)。你可以在系統提示輸入指令 Shell 會解析指令，例如最簡單的指令便是執行一個程式且帶有引數 (argument):</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Windows Terminal</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">date</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>Tue Sep <span class=\"token number\">27</span> 08:40:51 CST <span class=\"token number\">2022</span></pre></td></tr></table></figure><p>以 date 這隻程式來說，他會把現在的日期跟時間印在 shell 上。<br />\n那當然也可以使用帶有引數的程式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Windows Terminal</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">echo</span> hello</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>hello</pre></td></tr></table></figure><pre><code class=\"language-bash\"></code></pre>\n",
            "tags": [
                "Linux",
                "Shell",
                "Terminal"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/missing-semester/missing-semester-00/",
            "url": "https://yuto-0226.github.io/csie/missing-semester/missing-semester-00/",
            "title": "Before the Course",
            "date_published": "2022-09-26T09:29:58.000Z",
            "content_html": "<p>課程裡面所使用的環境都是類 UNIX 系統。如果你是 Windows 系統的話就要用 WSL 來模擬 LINUX 的環境，而且可能會有很多東西跟教授所講的不太一樣。接下來會用 Windows 11 操作。</p>\n<div class=\"note warning\">\n<p>Windows 10 版本必須是 2004 (19041.450) 以上</p>\n</div>\n<h1 id=\"windows-terminal\"><a class=\"anchor\" href=\"#windows-terminal\">#</a> Windows Terminal</h1>\n<p>一個可以讓你 Terminal 漂漂亮亮的東西<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLm1pY3Jvc29mdC5jb20vc3RvcmUvZGV0YWlsL3dpbmRvd3MtdGVybWluYWwvOU4wRFgyMEhLNzAxP2hsPXpoLXR3JmFtcDtnbD10dw==\"> Microsoft Store 的連結</span></p>\n<h1 id=\"windows-功能\"><a class=\"anchor\" href=\"#windows-功能\">#</a> Windows 功能</h1>\n<p>直接去搜尋打上 <code>Windows 功能</code> 並點開<br />\n<img data-src=\"https://i.imgur.com/06yRB0p.png\" alt=\"\" /></p>\n<p>把裡面的 <code>Windows 子系統 Linux 版</code> 跟 <code>虛擬機平台</code> 勾起來<br />\n<img data-src=\"https://i.imgur.com/wvDuRaG.png\" alt=\"\" /></p>\n<p>開啟 WindowsTerminal (Power Shell 或命令提示字元都可以)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Windows Terminal</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>wsl <span class=\"token parameter variable\">--install</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>著作權 <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> Microsoft Corporation。保留擁有權利。</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>使用方式: wsl.exe <span class=\"token punctuation\">[</span>Argument<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>CommandLine<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>用於執行 Linux 二進位檔的引數:</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>    如果未提供任何命令列，wsl.exe 會啟動預設的殼層。</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>    --exec, <span class=\"token parameter variable\">-e</span> <span class=\"token operator\">&lt;</span>CommandLine<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>        執行指定的命令，但不使用預設的 Linux 殼層。</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>    --</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>        依原樣傳遞剩餘的命令列。</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre>選項:</pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--cd</span> <span class=\"token operator\">&lt;</span>Directory<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre>        將指定的目錄設定為目前的工作目錄。</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre>        如果使用 ~，將會使用 Linux 使用者的主目錄路徑。如果該路徑的開頭</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre>        為 / 字元，將會解譯為絕對 Linux 路徑。</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>        否則，該值必須是絕對 Windows 路徑。</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre>    --distribution, <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre>        執行指定的發佈。</pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre>    --user, <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">&lt;</span>UserName<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"\"></td><td><pre>        以指定使用者的身分執行。</pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--system</span></pre></td></tr><tr><td data-num=\"30\"></td><td data-command=\"\"></td><td><pre>        啟動系統發佈的殼層。</pre></td></tr><tr><td data-num=\"31\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td data-command=\"\"></td><td><pre>用於管理 Windows 子系統 Linux 版的引數:</pre></td></tr><tr><td data-num=\"33\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--help</span></pre></td></tr><tr><td data-num=\"35\"></td><td data-command=\"\"></td><td><pre>        顯示使用資訊。</pre></td></tr><tr><td data-num=\"36\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--install</span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td data-command=\"\"></td><td><pre>        安裝其他 Windows 子系統 Linux 版發佈。</pre></td></tr><tr><td data-num=\"39\"></td><td data-command=\"\"></td><td><pre>        如需有效發佈的清單，請使用 <span class=\"token string\">'wsl --list --online'</span>。</pre></td></tr><tr><td data-num=\"40\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td data-command=\"\"></td><td><pre>        選項:</pre></td></tr><tr><td data-num=\"42\"></td><td data-command=\"\"></td><td><pre>            --distribution, <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">[</span>Argument<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td data-command=\"\"></td><td><pre>                依名稱下載並安裝發佈。</pre></td></tr><tr><td data-num=\"44\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td data-command=\"\"></td><td><pre>                引數:</pre></td></tr><tr><td data-num=\"46\"></td><td data-command=\"\"></td><td><pre>                    有效發佈名稱 <span class=\"token punctuation\">(</span>不區分大小寫<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"47\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td data-command=\"\"></td><td><pre>                範例:</pre></td></tr><tr><td data-num=\"49\"></td><td data-command=\"\"></td><td><pre>                    wsl <span class=\"token parameter variable\">--install</span> <span class=\"token parameter variable\">-d</span> Ubuntu</pre></td></tr><tr><td data-num=\"50\"></td><td data-command=\"\"></td><td><pre>                    wsl <span class=\"token parameter variable\">--install</span> <span class=\"token parameter variable\">--distribution</span> Debian</pre></td></tr><tr><td data-num=\"51\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td data-command=\"\"></td><td><pre>    --set-default-version <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td data-command=\"\"></td><td><pre>        針對新發佈變更預設安裝版本。</pre></td></tr><tr><td data-num=\"54\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--shutdown</span></pre></td></tr><tr><td data-num=\"56\"></td><td data-command=\"\"></td><td><pre>        立即終止所有執行中的發佈和 WSL <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"57\"></td><td data-command=\"\"></td><td><pre>        輕量公用程式虛擬機器。</pre></td></tr><tr><td data-num=\"58\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--status</span></pre></td></tr><tr><td data-num=\"60\"></td><td data-command=\"\"></td><td><pre>        顯示 Windows 子系統 Linux 版狀態。</pre></td></tr><tr><td data-num=\"61\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--update</span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"63\"></td><td data-command=\"\"></td><td><pre>        如果未指定選項，則會更新 WSL <span class=\"token number\">2</span> 核心</pre></td></tr><tr><td data-num=\"64\"></td><td data-command=\"\"></td><td><pre>        至最新版本。</pre></td></tr><tr><td data-num=\"65\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td data-command=\"\"></td><td><pre>        選項:</pre></td></tr><tr><td data-num=\"67\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--rollback</span></pre></td></tr><tr><td data-num=\"68\"></td><td data-command=\"\"></td><td><pre>                還原至舊版 WSL <span class=\"token number\">2</span> 核心。</pre></td></tr><tr><td data-num=\"69\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td data-command=\"\"></td><td><pre>在 Windows 子系統 Linux 版中用於管理發佈的引數:</pre></td></tr><tr><td data-num=\"71\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--export</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>FileName<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"73\"></td><td data-command=\"\"></td><td><pre>        將發佈匯出為 <span class=\"token function\">tar</span> 檔案。</pre></td></tr><tr><td data-num=\"74\"></td><td data-command=\"\"></td><td><pre>        檔案名稱可以是 - 以用於標準輸出。</pre></td></tr><tr><td data-num=\"75\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--import</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>InstallLocation<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>FileName<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"77\"></td><td data-command=\"\"></td><td><pre>        匯入指定的 <span class=\"token function\">tar</span> 檔案作為新發佈。</pre></td></tr><tr><td data-num=\"78\"></td><td data-command=\"\"></td><td><pre>        檔案名稱可以是 - 以用於標準輸入。</pre></td></tr><tr><td data-num=\"79\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td data-command=\"\"></td><td><pre>        選項:</pre></td></tr><tr><td data-num=\"81\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--version</span> <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"82\"></td><td data-command=\"\"></td><td><pre>                指定要用於新發佈的版本。</pre></td></tr><tr><td data-num=\"83\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td data-command=\"\"></td><td><pre>    --list, <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"85\"></td><td data-command=\"\"></td><td><pre>        列出發佈。</pre></td></tr><tr><td data-num=\"86\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td data-command=\"\"></td><td><pre>        選項:</pre></td></tr><tr><td data-num=\"88\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--all</span></pre></td></tr><tr><td data-num=\"89\"></td><td data-command=\"\"></td><td><pre>                列出全部發佈，包含</pre></td></tr><tr><td data-num=\"90\"></td><td data-command=\"\"></td><td><pre>                正在安裝或解除安裝的發佈。</pre></td></tr><tr><td data-num=\"91\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--running</span></pre></td></tr><tr><td data-num=\"93\"></td><td data-command=\"\"></td><td><pre>                只列出目前正在執行的發佈。</pre></td></tr><tr><td data-num=\"94\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td data-command=\"\"></td><td><pre>            --quiet, <span class=\"token parameter variable\">-q</span></pre></td></tr><tr><td data-num=\"96\"></td><td data-command=\"\"></td><td><pre>                只顯示發佈名稱。</pre></td></tr><tr><td data-num=\"97\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td data-command=\"\"></td><td><pre>            --verbose, <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"99\"></td><td data-command=\"\"></td><td><pre>                顯示所有發佈的詳細資訊。</pre></td></tr><tr><td data-num=\"100\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td data-command=\"\"></td><td><pre>            --online, <span class=\"token parameter variable\">-o</span></pre></td></tr><tr><td data-num=\"102\"></td><td data-command=\"\"></td><td><pre>                顯示可用發佈的清單，以使用 <span class=\"token string\">'wsl --install'</span> 安裝。</pre></td></tr><tr><td data-num=\"103\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td data-command=\"\"></td><td><pre>    --set-default, <span class=\"token parameter variable\">-s</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"105\"></td><td data-command=\"\"></td><td><pre>        將發佈設定為預設值。</pre></td></tr><tr><td data-num=\"106\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td data-command=\"\"></td><td><pre>    --set-version <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"108\"></td><td data-command=\"\"></td><td><pre>        變更所指定發佈的版本。</pre></td></tr><tr><td data-num=\"109\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td data-command=\"\"></td><td><pre>    --terminate, <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"111\"></td><td data-command=\"\"></td><td><pre>        終止指定的發佈。</pre></td></tr><tr><td data-num=\"112\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--unregister</span> <span class=\"token operator\">&lt;</span>Distro<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"114\"></td><td data-command=\"\"></td><td><pre>        取消登錄發佈並刪除根檔案系統。</pre></td></tr><tr><td data-num=\"115\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--mount</span> <span class=\"token operator\">&lt;</span>Disk<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"117\"></td><td data-command=\"\"></td><td><pre>        在所有 WSL2 發佈中連結並裝載實體磁碟。</pre></td></tr><tr><td data-num=\"118\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td data-command=\"\"></td><td><pre>        選項:</pre></td></tr><tr><td data-num=\"120\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--bare</span></pre></td></tr><tr><td data-num=\"121\"></td><td data-command=\"\"></td><td><pre>                將磁碟連結到 WSL2，但不要裝載磁碟。</pre></td></tr><tr><td data-num=\"122\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--type</span> <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"124\"></td><td data-command=\"\"></td><td><pre>                裝載磁碟時要使用的檔案系統，若未指定，預設為 ext4。</pre></td></tr><tr><td data-num=\"125\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--options</span> <span class=\"token operator\">&lt;</span>Options<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"127\"></td><td data-command=\"\"></td><td><pre>                其他裝載選項。</pre></td></tr><tr><td data-num=\"128\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td data-command=\"\"></td><td><pre>            <span class=\"token parameter variable\">--partition</span> <span class=\"token operator\">&lt;</span>Index<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"130\"></td><td data-command=\"\"></td><td><pre>                要裝載之磁碟分割的索引，若未指定，預設為整個磁碟。</pre></td></tr><tr><td data-num=\"131\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token parameter variable\">--unmount</span> <span class=\"token punctuation\">[</span>Disk<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"133\"></td><td data-command=\"\"></td><td><pre>        從所有 WSL2 發佈卸載並中斷連結磁碟。</pre></td></tr><tr><td data-num=\"134\"></td><td data-command=\"\"></td><td><pre>        若在沒有引數的情況下呼叫，即卸載並中斷連結所有磁碟。</pre></td></tr></table></figure><p>可以用參數 <code>-l -o</code>  把所有發行版都印出來</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Windows Terminal</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>wsl <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-o</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>以下是可安裝之有效發佈的清單。</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>使用 <span class=\"token string\">'wsl --install -d &lt;Distro>'</span> 安裝。</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>NAME            FRIENDLY NAME</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>Ubuntu          Ubuntu</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>Debian          Debian GNU/Linux</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>kali-linux      Kali Linux Rolling</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>openSUSE-42     openSUSE Leap <span class=\"token number\">42</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>SLES-12         SUSE Linux Enterprise Server v12</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>Ubuntu-16.04    Ubuntu <span class=\"token number\">16.04</span> LTS</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>Ubuntu-18.04    Ubuntu <span class=\"token number\">18.04</span> LTS</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>Ubuntu-20.04    Ubuntu <span class=\"token number\">20.04</span> LTS</pre></td></tr></table></figure><p>挑自己喜歡的版本按照上面給的提示安裝，以 Ubuntu 為例:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Windows Terminal</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>wsl <span class=\"token parameter variable\">--install</span> <span class=\"token parameter variable\">-d</span> Ubuntu</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "Shell"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/nihongo/Nl-01/",
            "url": "https://yuto-0226.github.io/nihongo/Nl-01/",
            "title": "名詞主題 ～は～です",
            "date_published": "2022-09-06T15:06:08.000Z",
            "content_html": "<p>日文句子結構可以拆成<span class=\"red\">主部</span>和<span class=\"red\">敘部</span>。<br />\n主部：一句話的<span class=\"red\">主題</span><br />\n敘部：<span class=\"red\">敘述主題</span>的句子</p>\n<h1 id=\"文ぶん法ぽう\"><a class=\"anchor\" href=\"#文ぶん法ぽう\">#</a> <ruby>文<rp> (</rp><rt>ぶん</rt><rp>)</rp> 法<rp> (</rp><rt>ぽう</rt><rp>)</rp></ruby></h1>\n<p>📖文法: <ruby>名<rp> (</rp><rt>めい</rt><rp>)</rp> 詞<rp> (</rp><rt>し</rt><rp>)</rp></ruby> A は<ruby>名<rp> (</rp><rt>めい</rt><rp>)</rp> 詞<rp> (</rp><rt>し</rt><rp>)</rp></ruby> B です。<br />\n「～は～です」為名詞肯定句。</p>\n<p><strong>例句</strong><ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby><ins> は</ins><ruby>学<rp> (</rp><rt>がく</rt><rp>)</rp> 生<rp> (</rp><rt>せい</rt><rp>)</rp></ruby><ins> です</ins>。<span class=\"green\">我是學生</span></p>\n<p>例句中的「<ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby> は」即為主部「<ruby>学<rp> (</rp><rt>がく</rt><rp>)</rp> 生<rp> (</rp><rt>せい</rt><rp>)</rp></ruby> です」是敘部。</p>\n<div class=\"note info\">\n<p>【<ruby>助<rp> (</rp><rt>じょ</rt><rp>)</rp> 詞<rp> (</rp><rt>し</rt><rp>)</rp></ruby>】<br />\n助詞在日語中扮演非常重要的角色。句子中若沒有助詞的協助，單詞之間便無法產生關聯。甚至有些同樣的句子將助詞換掉，可以使整個句子的意思改變甚至無法理解。</p>\n</div>\n<h1 id=\"は的意思\"><a class=\"anchor\" href=\"#は的意思\">#</a> は的意思</h1>\n<p>「は」在此文法中作為<ins>助詞</ins>使用，讀作「<span class=\"red\">wa</span>」。用來表示該劇的主題為は前面的名詞。</p>\n<p>例如說到「<ruby>東<rp> (</rp><rt>とう</rt><rp>)</rp> 京<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby> は～」就可以知道接下來要說的都會和該句的主題<ruby>東<rp> (</rp><rt>とう</rt><rp>)</rp> 京<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby> 有關。</p>\n<p><strong>例句</strong><ruby>東<rp> (</rp><rt>とう</rt><rp>)</rp> 京<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby><ins> は</ins><ruby>日<rp> (</rp><rt>に</rt><rp>)</rp> 本<rp> (</rp><rt>ほん</rt><rp>)</rp></ruby> の<ruby>首<rp> (</rp><rt>しゅ</rt><rp>)</rp> 都<rp> (</rp><rt>と</rt><rp>)</rp></ruby><ins> です</ins>。<span class=\"green\">東京是日本的首都</span></p>\n<h1 id=\"です的意思\"><a class=\"anchor\" href=\"#です的意思\">#</a> です的意思</h1>\n<p>日文的文體有分「<ruby>丁<rp> (</rp><rt>てい</rt><rp>)</rp> 寧<rp> (</rp><rt>ねい</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>」和「<ruby>普<rp> (</rp><rt>ふ</rt><rp>)</rp> 通<rp> (</rp><rt>つう</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>」，「です」就是丁寧体，「だ」則是普通体，這兩個都屬於<mark>斷定助動詞</mark>，用來表示句子的結束。</p>\n<p><strong>例句</strong>あなたが<ruby>好<rp> (</rp><rt>す</rt><rp>)</rp></ruby> き<ins>だ</ins>。＝あなたが<ruby>好<rp> (</rp><rt>す</rt><rp>)</rp></ruby> き<ins>です</ins>。<span class=\"green\">我喜歡你。</span></p>\n<h1 id=\"丁てい寧ねい体たい普ふ通つう体たい\"><a class=\"anchor\" href=\"#丁てい寧ねい体たい普ふ通つう体たい\">#</a> <ruby>丁<rp> (</rp><rt>てい</rt><rp>)</rp> 寧<rp> (</rp><rt>ねい</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>/<ruby> 普<rp> (</rp><rt>ふ</rt><rp>)</rp> 通<rp> (</rp><rt>つう</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby></h1>\n<p>「<ruby>丁<rp> (</rp><rt>てい</rt><rp>)</rp> 寧<rp> (</rp><rt>ねい</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>」又稱「禮貌體」，是對長輩上司或不熟的人所使用的文體，雖然說是敬體，但本身<mark>並無尊敬之意</mark>，只有禮貌、客氣的意思。反過來則是「<ruby>普<rp> (</rp><rt>ふ</rt><rp>)</rp> 通<rp> (</rp><rt>つう</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>」，是對晚輩下屬或熟識的人所使用的文體。以上又可稱為「<ruby>敬<rp> (</rp><rt>けい</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>／<ruby>常<rp> (</rp><rt>じょう</rt><rp>)</rp> 体<rp> (</rp><rt>たい</rt><rp>)</rp></ruby>」。</p>\n<h2 id=\"非過去式\"><a class=\"anchor\" href=\"#非過去式\">#</a> 非過去式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:left\">丁寧体</th>\n<th style=\"text-align:left\">普通体</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">肯</td>\n<td style=\"text-align:left\"><ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby> は<ruby>学<rp> (</rp><rt>がく</rt><rp>)</rp> 生<rp> (</rp><rt>せい</rt><rp>)</rp></ruby><span class=\"yellow\"> です</span>。</td>\n<td style=\"text-align:left\"><ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby> は<ruby>学<rp> (</rp><rt>がく</rt><rp>)</rp> 生<rp> (</rp><rt>せい</rt><rp>)</rp></ruby><span class=\"yellow\"> だ</span>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:left\"><ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby> は<ruby>先生<rp> (</rp><rt>せんせい</rt><rp>)</rp></ruby><span class=\"yellow\"> ではありません</span>。</td>\n<td style=\"text-align:left\"><ruby>私<rp> (</rp><rt>わたし</rt><rp>)</rp></ruby> は<ruby>先生<rp> (</rp><rt>せんせい</rt><rp>)</rp></ruby><span class=\"yellow\"> ではない</span>。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"過去式\"><a class=\"anchor\" href=\"#過去式\">#</a> 過去式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:left\">丁寧体</th>\n<th style=\"text-align:left\">普通体</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">肯</td>\n<td style=\"text-align:left\"><ruby>昨<rp> (</rp><rt>き</rt><rp>)</rp> 日<rp> (</rp><rt>のう</rt><rp>)</rp></ruby> は<ruby>月<rp> (</rp><rt>げつ</rt><rp>)</rp> 曜<rp> (</rp><rt>よう</rt><rp>)</rp> 日<rp> (</rp><rt>び</rt><rp>)</rp></ruby><span class=\"yellow\"> でした</span>。</td>\n<td style=\"text-align:left\"><ruby>昨<rp> (</rp><rt>き</rt><rp>)</rp> 日<rp> (</rp><rt>のう</rt><rp>)</rp></ruby> は<ruby>月<rp> (</rp><rt>げつ</rt><rp>)</rp> 曜<rp> (</rp><rt>よう</rt><rp>)</rp> 日<rp> (</rp><rt>び</rt><rp>)</rp></ruby><span class=\"yellow\"> だった</span>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:left\"><ruby>昨<rp> (</rp><rt>き</rt><rp>)</rp> 日<rp> (</rp><rt>のう</rt><rp>)</rp></ruby> は<ruby>火<rp> (</rp><rt>か</rt><rp>)</rp> 曜<rp> (</rp><rt>よう</rt><rp>)</rp> 日<rp> (</rp><rt>び</rt><rp>)</rp></ruby><span class=\"yellow\"> ではありませんでした</span>。</td>\n<td style=\"text-align:left\">昨日は<ruby>火<rp> (</rp><rt>か</rt><rp>)</rp> 曜<rp> (</rp><rt>よう</rt><rp>)</rp> 日<rp> (</rp><rt>び</rt><rp>)</rp></ruby><span class=\"yellow\"> ではなかった</span>。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>【注意】<br />\n名詞的否定用法有四種表現，意思皆相同，如下：<br />\n丁寧體：ではありません = じゃありません = ではないです = じゃないです<br />\n普通體：ではない = じゃない<br />\n（越右邊 &gt;&gt; 越口語。）正式、鄭重 &gt;&gt; 口語、隨意</p>\n</div>\n<h2 id=\"否定用法\"><a class=\"anchor\" href=\"#否定用法\">#</a> 否定用法</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">丁寧体在</th>\n<th style=\"text-align:left\">丁嚀体過去</th>\n<th style=\"text-align:left\">普通体現在</th>\n<th style=\"text-align:left\">普通体過去</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ではありません</td>\n<td style=\"text-align:left\">ではありませんでした</td>\n<td style=\"text-align:left\">ではない</td>\n<td style=\"text-align:left\">ではなかった</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">じゃありません</td>\n<td style=\"text-align:left\">じゃありませんでした</td>\n<td style=\"text-align:left\">じゃない</td>\n<td style=\"text-align:left\">じゃなかった</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ではないです</td>\n<td style=\"text-align:left\">ではなかったです</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">じゃないです</td>\n<td style=\"text-align:left\">じゃなかったです</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>寫作時要注意文體一致性，一般而言有傳達對象會使用丁寧体，無傳達對象則使用普通体。不論使用哪種文体，<span class=\"red\">一旦使用了全篇就要統一使用該文体</span>。</p>\n</div>\n<h1 id=\"疑問句\"><a class=\"anchor\" href=\"#疑問句\">#</a> 疑問句</h1>\n<p>使用用疑問句只要在肯定句的句末加上「か」即可。「か」是表示疑問的<span class=\"red\">助詞</span>，發音時聲調須提高。</p>\n<p><strong>例句</strong>あなたは<ruby>学<rp> (</rp><rt>がく</rt><rp>)</rp> 生<rp> (</rp><rt>せい</rt><rp>)</rp></ruby> です<ins>か</ins>。<span class=\"green\">你是學生嗎？</span></p>\n<blockquote>\n<p>回答「是」時用「はい」，回答「不是」時用「いいえ」。</p>\n</blockquote>\n<ul>\n<li><span class=\"yellow\">はい</span>、学生です。<span class=\"green\">是，我是學生。</span></li>\n<li><span class=\"yellow\">いいえ</span>、学生ではありません。<span class=\"green\">不是，我不是學生。</span></li>\n</ul>\n<p><strong>reference:</strong><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2lndXJlLnR3L2xlYXJuLWphcGFuZXNlL2dyYW1tYXIvbjUvMDEucGhw\"> 時雨の町: N5 文法 01「名詞 — 主題與說明句」～は～です</span></p>\n",
            "tags": []
        },
        {
            "id": "https://yuto-0226.github.io/csie/DSA/perceptron/",
            "url": "https://yuto-0226.github.io/csie/DSA/perceptron/",
            "title": "[C++]感知機 PLA",
            "date_published": "2022-05-12T06:20:28.000Z",
            "content_html": "<h1 id=\"感知機-pla\"><a class=\"anchor\" href=\"#感知機-pla\">#</a> 感知機 PLA</h1>\n<p>針對線性資料的分類<br />\n<img data-src=\"./img/p_origin.png\" alt=\"\" /></p>\n<p>訓練後<br />\n<img data-src=\"./img/p_after.png\" alt=\"\" /></p>\n<h1 id=\"函式變數\"><a class=\"anchor\" href=\"#函式變數\">#</a> 函式 &amp; 變數</h1>\n<ul>\n<li><code>dot()</code> ，將兩向量 (double) 內積並回傳其值 (double)。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec_1<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>vec_to_str()</code> ，將向量轉換成  <code>string</code>  並回傳。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">vec_to_str</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>intput_data()</code> ，輸入一組資料 (輸入向量 &amp; 類型)</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>train_data <span class=\"token function\">intput_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dimension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"class-train_data\"><a class=\"anchor\" href=\"#class-train_data\">#</a> class train_data</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">train_data</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> inputs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">bool</span> is_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">train_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> inputs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> is_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">get_intputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">bool</span> <span class=\"token function\">get_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"private\"><a class=\"anchor\" href=\"#private\">#</a> private</h3>\n<ul>\n<li>輸入層向量。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> inputs<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>類型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> is_type<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"public\"><a class=\"anchor\" href=\"#public\">#</a> public</h3>\n<ul>\n<li>建構元，直接初始化輸入向量和類型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">train_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> inputs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> is_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>get_intputs()</code> ，回傳輸入層向量。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">get_intputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>get_type()</code> ，回傳類型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">get_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>to_str()</code> ，將  <code>train_data</code>  物件的輸入向量、類型轉換成字串回傳。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"class-perceptron\"><a class=\"anchor\" href=\"#class-perceptron\">#</a> class perceptron</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">perceptron</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> weights<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">double</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">double</span> learning_rate<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">init_weights</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">init_bias</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">train_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">perceptron</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> learning_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">bool</span> <span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epochs<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"private-2\"><a class=\"anchor\" href=\"#private-2\">#</a> private</h3>\n<ul>\n<li><code>data</code> ，訓練資料陣列。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>weights</code> ，權重向量。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> weights<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>bias</code> ，偏置值 (閥值)。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> bias<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>learning_rate</code> ，學習率。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> learning_rate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>init_weights()</code> ，初始化權重向量。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_weights</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>init_bias</code> ，初始化偏置值。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_bias</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>cost()</code> ，回傳 cost</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>update()</code> ，更新權重。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>train_epoch ()，訓練完一組資料。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">train_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"public-2\"><a class=\"anchor\" href=\"#public-2\">#</a> public</h3>\n<ul>\n<li>建構元，設定輸入向量陣列、學習率。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">perceptron</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> learning_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>predict_type()</code> ，感知姬預測的類型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>train_data data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>train()</code> ，訓練感知機。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epochs<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>to_str()</code> ，把權重、偏置值及學習率轉換成字串後回傳。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"預設資料集\"><a class=\"anchor\" href=\"#預設資料集\">#</a> 預設資料集</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n_data<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n_dimension<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> n_correct<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> n_epoch<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    clock_t start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n_data<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"data: \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"[\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"] \"</span><span class=\"token operator\">&lt;&lt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"learning rate: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>learning_rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"epoch: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>n_epoch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    perceptron <span class=\"token function\">PLA</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> learning_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    PLA<span class=\"token punctuation\">.</span><span class=\"token function\">train</span><span class=\"token punctuation\">(</span>n_epoch<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    end <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n_data<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"data[\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]: predict -> \"</span><span class=\"token operator\">&lt;&lt;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        PLA<span class=\"token punctuation\">.</span><span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", actual -> \"</span><span class=\"token operator\">&lt;&lt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>PLA<span class=\"token punctuation\">.</span><span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>GREEN<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" ✓ \\n\"</span><span class=\"token operator\">&lt;&lt;</span>RESET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            n_correct<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>RED<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" x \\n\"</span><span class=\"token operator\">&lt;&lt;</span>RESET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>PLA<span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"correct rate: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n_correct<span class=\"token operator\">/</span>n_data<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"%, time: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>CLK_TCK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"手動輸入資料集\"><a class=\"anchor\" href=\"#手動輸入資料集\">#</a> 手動輸入資料集</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>train_data<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n_data<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> n_correct<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n_epoch<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    clock_t start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"dimension: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>n_dimension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"data amount: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>n_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n_data<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">intput_data</span><span class=\"token punctuation\">(</span>n_dimension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"learning rate: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>learning_rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"epoch: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">>></span>n_epoch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    perceptron <span class=\"token function\">PLA</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> learning_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PLA<span class=\"token punctuation\">.</span><span class=\"token function\">train</span><span class=\"token punctuation\">(</span>n_epoch<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    end <span class=\"token operator\">=</span> <span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n_data<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"data[\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]: predict -> \"</span><span class=\"token operator\">&lt;&lt;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        PLA<span class=\"token punctuation\">.</span><span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", actual -> \"</span><span class=\"token operator\">&lt;&lt;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>PLA<span class=\"token punctuation\">.</span><span class=\"token function\">predict_type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>GREEN<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" ✓ \\n\"</span><span class=\"token operator\">&lt;&lt;</span>RESET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            n_correct<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>RED<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" x \\n\"</span><span class=\"token operator\">&lt;&lt;</span>RESET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>PLA<span class=\"token punctuation\">.</span><span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"correct rate: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n_correct<span class=\"token operator\">/</span>n_data<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"%, time: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>CLK_TCK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "類神經網路"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/DSA/bit/",
            "url": "https://yuto-0226.github.io/csie/DSA/bit/",
            "title": "[C++]BIT 樹狀樹組",
            "date_published": "2022-04-01T03:52:00.000Z",
            "content_html": "<h1 id=\"bit\"><a class=\"anchor\" href=\"#bit\">#</a> BIT</h1>\n<blockquote>\n<p>A Fenwick tree or binary indexed tree is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers.<br />\n-wiki</p>\n</blockquote>\n<p>樹狀數組也稱作 Fenwick Tree 或 Binary Indexed Tree (BIT)，用來儲存資料，且可以快速求出前綴和或區間加總。對於一個長度 n 的陣列，可以在 O (n) 的時間初始化，在 O (n) 時間詢問一個前綴的訊息例如前綴和，以及在 O (n) 的時間修改其中一個值。但是 BIT 的缺點就是有些問題無法轉為前綴間的運算，無法個別操作元素。</p>\n<p><img data-src=\"https://i.imgur.com/d611u7b.png\" alt=\"\" /></p>\n<p>由上面這張圖可了解 BIT 儲存的區間。 <code>Index[]</code>  為儲存資料的陣列， <code>BIT[]</code>  為實際上儲存的區間。</p>\n<p>通常一個數狀數組會有 3 個函式:</p>\n<ul>\n<li><code>uptade(idx,delta)</code> : 將 delta 加到 idx 的節點上</li>\n<li><code>query(index)</code> : 查詢從第一個位置到 idx 的所有節點的加總</li>\n<li><code>range_query(idx_this,idx_that)</code> : 查詢從 idx_this 到 idx_that 間所有節點的總和</li>\n</ul>\n<h2 id=\"lowbit\"><a class=\"anchor\" href=\"#lowbit\">#</a> lowbit()</h2>\n<p>lowbit 是為了求一個二進位數中最低位 1 的值 (最靠近右邊的 1 的值)，構成 BIT 的核心</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在程式碼中 -x 會是 x 的補數加 1 ，把 x 和 -x 做 and 運算，得到的數即是 x 的 lowbit。以  <code>lowbit(4)</code>  為例，4 的二進位置表示是 4 (2)=0100，其補數為～4 (2)=1011，我們便可以求出 -x=1011+1=1100，再把 0100 和 1100 進行 and 運算即可求出其  <code>lowbit(4)</code> =0100。</p>\n<p><img data-src=\"https://i.imgur.com/i2tNBPO.png\" alt=\"\" /></p>\n<h2 id=\"update-tree\"><a class=\"anchor\" href=\"#update-tree\">#</a> Update Tree</h2>\n<p><img data-src=\"https://i.imgur.com/ISJQZSj.png\" alt=\"\" /></p>\n<p>在 Update Tree 中可以看出如何將值加到節點上。當更新一個節點時，會沿著節點間的邊 (edge) 向上把每個父節點 (parent) 都加上同樣的值。例如在一號節點上加上 5，那麼節點 2、4、8 也都會加上 5。</p>\n<ul>\n<li>節點 i 的父節點是 i-lowbit (i)</li>\n</ul>\n<h2 id=\"query-tree\"><a class=\"anchor\" href=\"#query-tree\">#</a> Query Tree</h2>\n<p><img data-src=\"https://i.imgur.com/USjovHL.png\" alt=\"\" /><br />\n在 Query Tree 中可以看出怎麼求出該索引的前綴。查詢某索引的前綴時，回傳的值會是該索引對應節點的值沿著邊把所有祖先 (ancestor) 的值相加。例如要求索引 7 的前綴，回傳的值會是節點 4、6、7 的相加。</p>\n<ul>\n<li>節點 i 的父節點是 i+lowbit (i)</li>\n</ul>\n<h1 id=\"程式碼\"><a class=\"anchor\" href=\"#程式碼\">#</a> 程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">bit_capacity</span> <span class=\"token expression\"><span class=\"token number\">100001</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">bit</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 更新元素值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 前綴和</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 區間查詢</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 實際儲存的陣列</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>bitree<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">[</span>bit_capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> bit<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>delta<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        i<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> bit<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sum<span class=\"token operator\">+=</span>index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        i<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> bit<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    bit tree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    tree<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> tree<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"BIT[\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"]=\"</span><span class=\"token operator\">&lt;&lt;</span>tree<span class=\"token punctuation\">.</span>bitree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "資料結構"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/zj-e798/",
            "url": "https://yuto-0226.github.io/sol/zj-e798/",
            "title": "e798 卷積神經網路",
            "date_published": "2022-03-18T10:48:23.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>2019TOI1214 新手同好會 5. 卷積神經網路 (CNN)  {<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2ktcmVnLmNzaWUubnRudS5lZHUudHcvd3AtY29udGVudC91cGxvYWRzL3F1ZXN0aW9uLzIwMTkxMi1vbnNpdGUvNS1DTk4ucGRm\">試題連結</span>}</p>\n<h2 id=\"問題敘述\"><a class=\"anchor\" href=\"#問題敘述\">#</a> 問題敘述</h2>\n<p>卷積神經網絡 (Convolutional Neural Network) 簡稱 CNN，是現在最火紅的深度學習課程必教的模型。<br />\nCNN 在影像識別方面非常厲害，許多影像辨識的模型都是以 CNN 的架構為基礎去做延伸。<br />\nCNN 分為三個部分：卷積層 (convolution layer)、池化層 (pooling layer) 和全連接層 (fully connected layer)。<br />\n卷積層用於提取影像特徵，池化層減小資料的空間大小，全連接層主要目的為實現分類。<br />\n池化層最常見的作法是最大池化法 (max pooling)，它將輸入的影像劃分為若干個 2×2 的矩形子區域，對每個子區域輸出最大值。<br />\n給定一個 n×n 的二維陣列，請實作最大池化演算法並輸出池化後的結果。</p>\n<p><img data-src=\"https://zerojudge.tw/ShowImage?id=1442\" alt=\"\" /><br />\n<strong>最大池化法示意圖</strong><br />\n圖片來源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWJhcmMub3JnL2VtYmFyY19tbGkvZG9jL2J1aWxkL2h0bWwvTUxJX2tlcm5lbHMvcG9vbGluZ19tYXguaHRtbA==\">https://embarc.org/embarc_mli/doc/build/html/MLI_kernels/pooling_max.html</span></p>\n<h2 id=\"輸入格式\"><a class=\"anchor\" href=\"#輸入格式\">#</a> 輸入格式</h2>\n<p>第一行有一個正整數 n（4 &lt;= n &lt;= 20，n 為 2 的倍數），代表輸入影像邊長。接下去有 n 行，每行各有 n 個數字，數值範圍在正負 2^31 之間，以空白隔開，代表影像陣列中的資料值。</p>\n<h2 id=\"輸出格式\"><a class=\"anchor\" href=\"#輸出格式\">#</a> 輸出格式</h2>\n<p>輸出經 2x2 最大池化後的結果。</p>\n<h2 id=\"範例測資\"><a class=\"anchor\" href=\"#範例測資\">#</a> 範例測資</h2>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>輸入1 :</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>12 20 30 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8 12 2 0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>34 70 37 4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>112 100 25 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>輸出1 :</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>20 30</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>112 37</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>輸入2 :</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>6 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>10 2 0 12 1 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>21 0 13 2 2 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>0 0 0 10 0 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>19 2 0 13 61 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>0 1 32 3 0 2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>9 2 0 31 11 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>輸出2 :</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>21 13 3</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>19 13 61</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>9 38 11</pre></td></tr></table></figure><h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>簡化題目後，我們可以得出題目是要我們把一個大矩陣都拆成 2*2 的小矩陣。然後把每個小矩陣的最大值輸出成一個新的矩陣，而這個過程被稱作池化。了解題目的要求後就簡單了，我的作法是以一個小區塊先池化，輸出後再處理下一個小區塊。</p>\n<p><img data-src=\"https://i.imgur.com/YCcYikU.png\" alt=\"\" /></p>\n<p>如下圖所示，而實際的方法可以把輸入的影像邊常除 2，再丟進迴圈裡跑。這樣迴圈每跑次就是處理一組小矩陣。<br />\n比較要注意的是後續處理比較四格大小的時候，要記得把迴圈索引值乘 2。</p>\n<p><img data-src=\"https://i.imgur.com/zXaq4ZH.png\" alt=\"\" /></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> pool<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cin<span class=\"token operator\">>></span>pool<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            max<span class=\"token operator\">=</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>max<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "ZeroJudge"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/sqrtx/",
            "url": "https://yuto-0226.github.io/sol/sqrtx/",
            "title": "[LeetCode] 69. Sqrt(x)(C++)",
            "date_published": "2022-03-04T11:50:42.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>Given a non-negative integer  <code>x</code> , compute and return the square root of  <code>x</code> .</p>\n<p>Since the return type is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result is returned.</p>\n<p><strong>Note:</strong> You are not allowed to use any built-in exponent function or operator, such as  <code>pow(x, 0.5)</code>  or  <code>x ** 0.5</code> .</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: x = 4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: 2</pre></td></tr></table></figure><p><strong>Example 2:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: x = 8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre></td></tr></table></figure><p><strong>Constraints:</strong></p>\n<ul>\n<li>0 &lt;= x &lt;= 231 - 1</li>\n</ul>\n<h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>連分數法求根號值，可以參考<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0dS5iZS9OWGV4a0p5UG9Rcz90PTI3\">李永樂老師的影片</span><br />\n可以得知 S=a^2+b 中的 a 會等於題目所求的答案</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">long</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">*</span>count<span class=\"token operator\">></span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            temp<span class=\"token operator\">=</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "LeetCode"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/two-sum/",
            "url": "https://yuto-0226.github.io/sol/two-sum/",
            "title": "[LeetCode] 1. Two-Sum(C++)",
            "date_published": "2022-03-04T11:32:42.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>Given an array of integers  <code>nums</code>  and an integer  <code>target</code> , return indices of the two numbers such that they add up to  <code>target</code> .</p>\n<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>\n<p>You can return the answer in any order.</p>\n<p><strong>Example 1</strong>:</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [2,7,11,15], target = 9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [0,1]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</pre></td></tr></table></figure><p><strong>Example 2:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [3,2,4], target = 6</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [1,2]</pre></td></tr></table></figure><p><strong>Example 3:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [3,3], target = 6</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [0,1]</pre></td></tr></table></figure><p><strong>Constraints:</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n<h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>用兩個  <code>for</code>  迴圈一個一個去檢查</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "C++",
                "LeetCode"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/DSA/floodfill/",
            "url": "https://yuto-0226.github.io/csie/DSA/floodfill/",
            "title": "[C++]泛洪演算法 Flood Fill Alogrithm",
            "date_published": "2022-02-05T06:29:02.000Z",
            "content_html": "<h1 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h1>\n<p>Flood Fill 演算法是從一個區域中提取若干個連通的點與其他相鄰區域區分開 (或分別染成不同顏色) 的經典演算法 (Algorithm)。因為其思路類似洪水從一個區域擴散到所有能到達的區域而得名。</p>\n<h1 id=\"實作方法\"><a class=\"anchor\" href=\"#實作方法\">#</a> 實作方法</h1>\n<ul>\n<li>深度優先搜尋 (Depth-First Search,DFS)</li>\n<li>廣度優先搜尋 (Breadth-First Search,BFS)</li>\n</ul>\n<h2 id=\"bfs-實作\"><a class=\"anchor\" href=\"#bfs-實作\">#</a> BFS 實作</h2>\n<p>把最外面的點加入佇列 (Queue) 裡面，分別按照佇列中的點染色</p>\n<p><img data-src=\"https://i.imgur.com/2C9pVdq.gif\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  title: flood fill algorithm</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//   date: 2/1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//author: 羅崧瑋</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span>  <span class=\"token comment\">// terminal color font</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// matrix size</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">row</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">col</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 上，下，左，右</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> nx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> ny<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// pair type</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pair</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>pair_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// (i,j) 起始位置</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">floodfill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> newc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 染色佇列</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>pair_t<span class=\"token operator\">></span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    pos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 染色</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">auto</span> f<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        i<span class=\"token operator\">=</span>f<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        j<span class=\"token operator\">=</span>f<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        pos<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 邊界檢查 &amp; 同色檢查</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>newc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>newc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">printa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            pos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token operator\">+</span>nx<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span>ny<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>row<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\033[37;7m\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\033[0m\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\033[34;7m\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\033[0m\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// matrix</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">floodfill</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"final :\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">printa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3NpZS5udHUuZWR1LnR3L35zcHJvdXQvYWxnbzIwMTcvcHB0X3BkZi9mbG9vZF9maWxsLnBkZg==\">資訊之芽: Flood Fill Algorithm</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WdWlYT2M4MVVETQ==\">Inside code: Flood fill algorithm</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRmxvb2RfZmlsbA==\">Wiki: Flood Fill</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdibG9ncy5uZXQvYS81ZDA3MjU4N2JkOWVlZTFlZGUwMzkyMGE=\">hn_tzy: Linux C/C++ 如何輸出彩色字體</span></li>\n</ul>\n",
            "tags": [
                "筆記",
                "C++"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/C++/cpp-vector/",
            "url": "https://yuto-0226.github.io/csie/C++/cpp-vector/",
            "title": "向量 Vector(STL)",
            "date_published": "2022-01-05T12:24:37.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在學寫 C++ 的過程當中，從 Array 到 Vector 一直是很難跨越的障礙，<br />\n因為我的物件導向和指標不是學的很完善，導致會有點看不懂程式碼在做什麼，<br />\n所以這次我透過邊實作邊學習的方式來盡量彌補我知識上的不足，<br />\n順便做個筆記來記錄。</p>\n<h1 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h1>\n<p>Vector 是 C++ 標準程式庫中的一個 class，可視為會自動擴展容量的陣列，<br />\n是 C++ 標準程式庫中的眾多容器 (container) 之一，以循序 (Sequential) 的方式維護變數集合，<br />\n使用前預先  <code>#include &lt;vector&gt;</code>  即可。</p>\n<h2 id=\"特色\"><a class=\"anchor\" href=\"#特色\">#</a> 特色</h2>\n<ul>\n<li>支援隨機存取</li>\n<li>集合尾端增刪元素很快：常數時間 O (1)</li>\n<li>集合中間增刪元素比較費時：線性時間 O (n)</li>\n<li>以模板 (泛型) 方式實現，可以儲存任意類型的變數，包括使用者自定義的資料型態。</li>\n</ul>\n<h1 id=\"成員函式\"><a class=\"anchor\" href=\"#成員函式\">#</a> 成員函式</h1>\n<p>vector 類別是以容器 (Container) 模式為基準設計的，也就是說，基本上它有  <code>begin()</code> 、 <code>end()</code> 、 <code>size()</code> 、 <code>max_size()</code> 、 <code>empty()</code>  以及  <code>swap()</code>  這幾個方法。</p>\n<h2 id=\"存取元素的方法\"><a class=\"anchor\" href=\"#存取元素的方法\">#</a> 存取元素的方法</h2>\n<ul>\n<li><code>v[i]</code>  : 存取索引值為 i 的元素值 (索引值從零起算，故第一個元素是 v [0]。)</li>\n<li><code>v.at(i)</code>  : 存取索引值為 i 的元素的值</li>\n<li><code>v.front()</code>  : 回傳 vector 第一個元素的值</li>\n<li><code>v.back()</code>  : 回傳 vector 最尾端元素的值</li>\n</ul>\n<blockquote>\n<p>用 operator  <code>[]</code>  可能會 <strong>Segmentation Fault</strong>。以  <code>at()</code>  存取會做<strong>陣列邊界檢查</strong>，如果存取越界將會拋出一個<strong>例外</strong>，這是與 operator  <code>[]</code>  的唯一差異。撰寫較嚴肅、安全性較高的程式時使用  <code>at()</code> 。</p>\n</blockquote>\n<h2 id=\"新增或移除元素的方法\"><a class=\"anchor\" href=\"#新增或移除元素的方法\">#</a> 新增或移除元素的方法</h2>\n<ul>\n<li><code>v.push_back()</code>  - 新增元素至 vector 的尾端，必要時會進行記憶體配置。</li>\n<li><code>v.pop_back()</code>  - 刪除 vector 最尾端的元素。</li>\n<li><code>v.insert()</code>  - 插入一個或多個元素至 vector 內的任意位置。</li>\n<li><code>v.erase()</code>  - 刪除 vector 中一個或多個元素。</li>\n<li><code>v.clear()</code>  - 清空所有元素。</li>\n</ul>\n<blockquote>\n<p>少依賴  <code>push_back()</code>  的自動記憶體配置，不是不要用  <code>push_back()</code> ，是不要讓  <code>push_back()</code>  自己判定記憶體需求，能自己要記憶體的就自己要，善用  <code>reserve()</code> 、 <code>resize()</code>  或建構子 (constructor) 引數。</p>\n</blockquote>\n<h2 id=\"取得長度容量\"><a class=\"anchor\" href=\"#取得長度容量\">#</a> 取得長度 / 容量</h2>\n<p><code>v.size()</code>  - 取得 vector 目前持有的元素個數。<br />\n <code>v.empty()</code>  - 如果 vector 內部為空，則傳回 true 值。<br />\n <code>v.capacity()</code>  - 取得 vector 目前可容納的最大元素個數。這個方法與記憶體的組態有關，它通常只會增加，不會因為元素被刪減而隨之減少。</p>\n<h2 id=\"重新組態重設長度\"><a class=\"anchor\" href=\"#重新組態重設長度\">#</a> 重新組態 / 重設長度</h2>\n<p><code>v.reserve()</code>  - 擴大 vector 的容量大小 (組態更多的記憶體)。<br />\n <code>v.resize()</code>  - 改變 vector 目前持有的元素個數。</p>\n<blockquote>\n<ul>\n<li><code>reserve()</code>  的目的是<strong>擴大容量</strong>。<br />\n做完時，vector 的長度不變，capacity 只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。因為 vector 一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。</li>\n<li><code>resize()</code>  的目的是<strong>改變 vector 的長度</strong>。<br />\n做完時，vector 的長度會改變為指定的大小，capacity 則視需要調整，確保不小於 size，資料所在位置可能會移動。如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。</li>\n</ul>\n</blockquote>\n<h2 id=\"迭代-iterator\"><a class=\"anchor\" href=\"#迭代-iterator\">#</a> 迭代 (Iterator)</h2>\n<p><code>v.begin()</code>  - 回傳一個 Iterator，它指向 vector 第一個元素。<br />\n <code>v.end()</code>  - 回傳一個 Iterator，它指向 vector 最尾端元素的下一個位置 (非最末元素)。<br />\n <code>v.rbegin()</code>  - 回傳一個反向 Iterator，它指向 vector 最尾端元素的。<br />\n <code>v.rend()</code>  - 回傳一個 Iterator，它指向 vector 的第一個元素的前一個位置。</p>\n<p><img data-src=\"https://i.imgur.com/LV9jk0s.png\" alt=\"\" /></p>\n<h1 id=\"使用-vector-實做\"><a class=\"anchor\" href=\"#使用-vector-實做\">#</a> 使用 vector 實做</h1>\n<p>在實際使用 vector 之前，我們必須先了解如何宣告 vector 變數。</p>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>以下即是宣告一個  <code>int</code>  型的 vector， <code>size()</code>  是 0,   <code>capacity()</code>  也是 0。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用萬用標頭檔 ( <code>&lt;bits/stdc++.h&gt;</code> ) 就可以不用再  <code>#include &lt;vector&gt;</code> 。</p>\n</blockquote>\n<p>在初始化時可以用用 operator  <code>=</code>  就把值丟進去，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或是使用建構子，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>若要從其他容器中把值複製過來可以用 operator  <code>=</code> ，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同樣地也可以用建構子，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>還可以從 array 裡複製過來，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>範圍複製也是可以的，vector 的可以這樣寫，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;3, 4&#125;</span></pre></td></tr></table></figure><p>array 的可以這樣寫，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;3, 4&#125;</span></pre></td></tr></table></figure><h2 id=\"存取元素的方法-2\"><a class=\"anchor\" href=\"#存取元素的方法-2\">#</a> 存取元素的方法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 4</span></pre></td></tr></table></figure><h2 id=\"新增或移除元素的方法-2\"><a class=\"anchor\" href=\"#新增或移除元素的方法-2\">#</a> 新增或移除元素的方法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;1, 2, 3, 4, 5&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;1, 2, 5, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 此時所有元素被清空，但 capacity 為 5</span></pre></td></tr></table></figure><h3 id=\"用-swap-刪除元素\"><a class=\"anchor\" href=\"#用-swap-刪除元素\">#</a> 用 swap () 刪除元素</h3>\n<p>成員函式 swap ()，這個函式用來交換兩個 vector 容器中的元素。<br />\n因此可以與一個具有相同資料類型的內容為空的局部變數 swap，從而實現徹底刪除元素、釋放容量的目的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//v1 內的元素與 v2 交換，即 v1 內所有元素被刪除</span></pre></td></tr></table></figure><h2 id=\"長度容量以及配置大小\"><a class=\"anchor\" href=\"#長度容量以及配置大小\">#</a> 長度 / 容量以及配置大小</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 把 capacity 擴大為 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// &#123;1, 2, 3, 4, 0, 0&#125;</span></pre></td></tr></table></figure><h2 id=\"尋訪元素\"><a class=\"anchor\" href=\"#尋訪元素\">#</a> 尋訪元素</h2>\n<p>尋訪元素除了像陣列那樣寫以外，還可以用疊代器寫</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"vectorassign\"><a class=\"anchor\" href=\"#vectorassign\">#</a> vector::assign()</h2>\n<p><code>vector::assign()</code>  是 C++ 中的 STL，它通過替換舊元素為向量元素分配新值。如果需要，它也可以修改向量的大小。</p>\n<h3 id=\"分配常量值\"><a class=\"anchor\" href=\"#分配常量值\">#</a> 分配常量值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;10, 10, 10, 10 ,10&#125;</span></pre></td></tr></table></figure><h3 id=\"從-array-或-vector-分配值\"><a class=\"anchor\" href=\"#從-array-或-vector-分配值\">#</a> 從 array 或 vector 分配值</h3>\n<p>除了上面有提過用 operator  <code>=</code>  或建構子的方式在初始化時賦值，<br />\n也可以透過  <code>assign()</code>  來執行。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;1, 2&#125;</span></pre></td></tr></table></figure><h3 id=\"修改-vector\"><a class=\"anchor\" href=\"#修改-vector\">#</a> 修改 vector</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// &#123;10, 10, 10, 10 ,10&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;10, 10, 10&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcm9wZW5nYXRlLmJsb2dzcG90LmNvbS8yMDE1LzA3L2NjLXZlY3Rvci1zdGwuaHRtbA==\">Mr. Opengate: C/C++ - Vector (STL) 用法與心得完全攻略</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXZlY3Rvci8=\">ShengYu Talk: C++ std::vector 用法與範例</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVmVjdG9yXyhTVEwp\">Wiki 維基百科: Vector (STL)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aW1za3kuY29tL3poLXR3L2V4YW1wbGVzL3VzYWdlL3ZlY3Rvci1hc3NpZ24taW4tYy1zdGwuaHRtbA==\">純淨天空: C++ vector::assign () 用法及代碼示例</span></li>\n</ul>\n",
            "tags": [
                "筆記",
                "C++",
                "vector"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/DSA/cpp-linkedlist/",
            "url": "https://yuto-0226.github.io/csie/DSA/cpp-linkedlist/",
            "title": "[C++]鏈接串列 Linked List",
            "date_published": "2022-01-01T13:00:11.000Z",
            "content_html": "<h1 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h1>\n<p>何謂<strong>鏈接串列 (Linked List)</strong>? 串列是一種常見的資料結構，<br />\n使用節點儲存資料，且透過接點的指標指向下一個節點，<br />\n形成一串記憶體位置不相連的資料串。</p>\n<p><img data-src=\"https://i.imgur.com/qkADZ5a.png\" alt=\"\" /></p>\n<h1 id=\"linked-list-vs-array\"><a class=\"anchor\" href=\"#linked-list-vs-array\">#</a> Linked List vs Array</h1>\n<h3 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> Array</h3>\n<p><strong>Pros</strong></p>\n<ul>\n<li>random access：只要利用<strong> index</strong> 即可在 <code>O(1)</code>  時間對<strong> Array</strong> 的資料做存取。</li>\n<li>較 Linked list 為節省記憶體空間：因為<strong> Linked list</strong> 需要多一個<strong> pointer</strong> 來記錄下一個節點的記憶體位置。</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>新增 / 刪除資料很麻煩：若要在第一個位置新增資料，就需要 <code>O(N)</code>  時間把矩陣中所有元素往後移動。同理，若要刪除第一個位置的資料，也需要 <code>O(N)</code>  時間把矩陣中剩餘的元素往前移動。</li>\n<li>若資料數量時常在改變，要時常調整矩陣的大小，會花費 <code>O(N)</code>  的時間在搬動資料 (把資料從舊的矩陣移動到新的矩陣)。</li>\n</ul>\n<p><strong>適用時機</strong></p>\n<ul>\n<li>希望能夠快速存取資料。</li>\n<li>已知欲處理的資料數量，便能確認矩陣的大小。</li>\n<li>要求記憶體空間的使用越少越好。</li>\n</ul>\n<h3 id=\"linked-list\"><a class=\"anchor\" href=\"#linked-list\">#</a> Linked List</h3>\n<p><strong>Pros</strong></p>\n<ul>\n<li>新增 / 刪除資料較<strong> Array</strong> 簡單，只要對 <code>O(1)</code>  個節點調整<strong> pointer</strong> 即可，不需要如同<strong> Array</strong> 般搬動其餘元素。</li>\n<li>Linked list 的資料數量可以是動態的，不像<strong> Array</strong> 會有 resize 的問題。</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>因為<strong> Linked list</strong> 沒有<strong> index</strong>，若要找到特定節點，需要從頭 (Node *first) 開始找起，搜尋的時間複雜度為 <code>O(N)</code> 。</li>\n<li>需要額外的記憶體空間來儲存<strong> pointer</strong>。</li>\n</ul>\n<p><strong>適用時機</strong></p>\n<ul>\n<li>無法預期資料數量時，使用<strong> Linked list</strong> 就沒有 resize 的問題。</li>\n<li>需要頻繁地新增 / 刪除資料時。</li>\n<li>不需要快速查詢資料。</li>\n</ul>\n<h1 id=\"用-class-實作\"><a class=\"anchor\" href=\"#用-class-實作\">#</a> 用 class 實作</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Linkedlist</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Node <span class=\"token operator\">*</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">printlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">printlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"List is empty.\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Node <span class=\"token operator\">*</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>current<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        current<span class=\"token operator\">=</span>current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Node <span class=\"token operator\">*</span>newNode<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    newNode<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    first<span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Node <span class=\"token operator\">*</span>newNode<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        first<span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    Node <span class=\"token operator\">*</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        current<span class=\"token operator\">=</span>current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    current<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Node <span class=\"token operator\">*</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Node <span class=\"token operator\">*</span>previous<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>current<span class=\"token operator\">-></span>data<span class=\"token operator\">!=</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        previous<span class=\"token operator\">=</span>current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        current<span class=\"token operator\">=</span>current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"There's no \"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" in list.\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        first<span class=\"token operator\">=</span>current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">delete</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        current<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        previous<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">delete</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        current<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    Node <span class=\"token operator\">*</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    first<span class=\"token operator\">=</span>first<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">delete</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    current<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">LinkedList</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>first<span class=\"token operator\">-></span>next<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    Node <span class=\"token operator\">*</span>previous<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>         <span class=\"token operator\">*</span>current<span class=\"token operator\">=</span>first<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         <span class=\"token operator\">*</span>preceding<span class=\"token operator\">=</span>first<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>preceding<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        current<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>previous<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        previous<span class=\"token operator\">=</span>current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        current<span class=\"token operator\">=</span>preceding<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        preceding<span class=\"token operator\">=</span>preceding<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    current<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>previous<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    first<span class=\"token operator\">=</span>current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    LinkedList list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">printlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2FscmlnaHRjaGl1LmdpdGh1Yi5pby9TZWNvbmRSb3VuZC9saW5rZWQtbGlzdC1pbnRyb2ppYW4tamllLmh0bWw=\">http://alrightchiu.github.io/SecondRound/linked-list-introjian-jie.html</span></p>\n",
            "tags": [
                "筆記",
                "C++",
                "資料結構",
                "Linked List"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/zj-b004/",
            "url": "https://yuto-0226.github.io/sol/zj-b004/",
            "title": "b004. 一個都不能少",
            "date_published": "2021-09-15T10:13:18.000Z",
            "content_html": "<h1 id=\"b004-一個都不能少\"><a class=\"anchor\" href=\"#b004-一個都不能少\">#</a> b004: 一個都不能少</h1>\n<h2 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h2>\n<p>進德女子監獄座落於自由女中旁，是間作風開放的監獄，每到中午時間便會放風讓收容人到外面用餐。當然還是會有人逾時不歸，身為管理者的美惠，每天總是要為哪些人沒有回來而傷透腦筋。現在想請你寫一個程式，幫助美惠找出哪些人沒有回來。</p>\n<p>輸入說明：<br />\n一開始有兩個正整數 N、M (0&lt;=M&lt;N&lt;=20)，N 代表收容人的人數 (編號從 1 到 N)，M 代表回來的人數，接下來有 M 個正整數，分別代表這 M 位已經回來的收容人編號 (不用考慮編號超出範圍或其他錯誤)。</p>\n<h2 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h2>\n<p>我覺得這一題我的解法算笨<br />\n我想說直接把犯人編號當陣列的索引用<br />\n然後在回來的編號裡面放值<br />\n最後再去檢查</p>\n<p>應該還可以再精簡一點<br />\n感覺有些程式碼有點多餘<br />\n不過我懶得改：P</p>\n<h2 id=\"範例程式碼\"><a class=\"anchor\" href=\"#範例程式碼\">#</a> 範例程式碼</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> back<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> out<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">is_out</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>M<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> outNum<span class=\"token operator\">=</span>N<span class=\"token operator\">-</span>M<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cin<span class=\"token operator\">>></span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    back<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    temp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      cout<span class=\"token operator\">&lt;&lt;</span>out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "筆記",
                "ZeroJudge"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/project/popcat/",
            "url": "https://yuto-0226.github.io/project/popcat/",
            "title": "POPCAT 自動連點器",
            "date_published": "2021-08-18T11:13:26.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>近期 Pop cat 風靡全球 大家都想拿到第一名<br />\n什麼是 Pop cat? 這就要從一隻可愛的貓說起</p>\n<blockquote>\n<p>Popcat 風潮來自推特上一段爆紅的貓咪影片 這隻名為 Oatmeal 的貓咪正在向主人 Xavier 撒嬌 嘴巴一開一合的 樣子非常可愛<br />\n Xavier 也把 Oatmeal 的圖片做成 gif 圖 後來被他的朋友 PO 到 Reddit 論壇上 突然爆紅 被歐美網友們做成各式各樣的迷因（meme） 搭配上「POP」的音效<br />\n - 數位時代。檢自 https://www.bnext.com.tw/article/64440/popcat-click-competition-janis (2021/08/19)</p>\n</blockquote>\n<p>&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;So there's a video with some images of my cat Oatmeal out and here's the full clip of him chirping at a bug. &lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LmNvLzRNVlRXaUlrbmM=\">https://t.co/4MVTWiIknc</span>&quot;&gt;<span class=\"exturl\" data-url=\"aHR0cDovL3BpYy50d2l0dGVyLmNvbS80TVZUV2lJa25j\">pic.twitter.com/4MVTWiIknc</span>&lt;/a&gt;&lt;/p&gt;— Xavier (@XavierBFB) &lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9YYXZpZXJCRkIvc3RhdHVzLzEzMTUxODQxNTUyNzQyMTEzMjk/cmVmX3NyYz10d3NyYyU1RXRmdw==\">https://twitter.com/XavierBFB/status/1315184155274211329?ref_src=twsrc^tfw</span>&quot;&gt;October 11, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbGF0Zm9ybS50d2l0dGVyLmNvbS93aWRnZXRzLmpz\">https://platform.twitter.com/widgets.js</span>&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</p>\n<p>我那時就想 一直點一直點手很酸 國外也有人用連點器 (物理)<br />\n 那為什麼我不來試看看用程式寫<br />\n然後又剛好看到 Youtube 上的 Selenium 教學<br />\n剛好可以讓我寫出連點器 於是便著手編寫了</p>\n<h1 id=\"selenium\"><a class=\"anchor\" href=\"#selenium\">#</a> Selenium</h1>\n<blockquote>\n<p>Selenium 是一個綜合性的項目，為 web 瀏覽器的自動化提供了各種工具和依賴包</p>\n</blockquote>\n<p>要在 Python 中使用 Selenium 要先安裝它的套件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> selenium</pre></td></tr></table></figure><p>然後要安裝對應的 WebDriver 才能讓它在瀏覽器上面跑<br />\n這邊就用 Chrome (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2Nocm9tZWRyaXZlci9kb3dubG9hZHM=\">網址</span>)<br />\n 記得要挑對版本下載<br />\n下載完後把他丟到程式檔案的同一個資料夾就可以了</p>\n<h1 id=\"程式碼\"><a class=\"anchor\" href=\"#程式碼\">#</a> 程式碼</h1>\n<p>Github:  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1dXRvLTAyMjYvcG9wY2F0X2F1dG9jbGljaw==\">連結</span></p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"./chromedriver.exe\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>PATH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://popcat.click/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>neko <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 隨機點擊次數及休息時間</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>click_random <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sec_random <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>click_random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        neko<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sec_random<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python",
                "網路爬蟲",
                "Hack Life"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/logic-gate/",
            "url": "https://yuto-0226.github.io/csie/logic-gate/",
            "title": "二進位制 & 邏輯閘實作",
            "date_published": "2021-06-16T09:26:48.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>我們都知道在 C++ 裡面<br />\n如過要實現加法的話可以寫成</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>答案理所當然會是 3<br />\n 雖然我們是用 C++ 去編寫的<br />\n但是電腦執行的卻是編譯過的機械碼<br />\n繞我不禁好奇，電腦是如何進行加法的？<br />\n 不是透過寫程式碼讓他編譯，而是最原始的方法<br />\n單純的電子訊號，也就是 0 和 1</p>\n<h1 id=\"二進位制\"><a class=\"anchor\" href=\"#二進位制\">#</a> 二進位制</h1>\n<p><code>5+5</code>  ，只要有好好學過數學的人都應該會知道答案是 10<br />\n 這種進位制即是大家最熟悉的  <code>10 進位制</code>  ，也就是當數字加到 10 時要進一位<br />\n <code>2 進位制</code>  也是一樣的概念，當數字加到 2 時要進一位<br />\n舉例來說  <code>1+1</code>  的答案就會是 10</p>\n<p><code>2 進位制</code>  廣泛被運用在電腦上面，而一個數字也被稱作位元</p>\n<h1 id=\"邏輯閘\"><a class=\"anchor\" href=\"#邏輯閘\">#</a> 邏輯閘</h1>\n<p>邏輯閘是在積體電路上的基本組件。這些電晶體的組合可以使代表兩種訊號的高低電平在通過它們之後產生高電平或者低電平的訊號。高、低電平可以分別代表邏輯上的「真」與「假」或二進位當中的 1 和 0，從而實現邏輯運算。常見的邏輯閘包括與閘，或閘，非閘，互斥或閘（也稱：互斥或）等等。(<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTgyJThGJUU4JUJDJUFGJUU5JTk2JTk4\">維基百科</span>)</p>\n<h2 id=\"and\"><a class=\"anchor\" href=\"#and\">#</a> AND</h2>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"or\"><a class=\"anchor\" href=\"#or\">#</a> OR</h2>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"xor\"><a class=\"anchor\" href=\"#xor\">#</a> XOR</h2>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"實作\"><a class=\"anchor\" href=\"#實作\">#</a> 實作</h1>\n<p>這次的實作是參考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ1MwTjViYU5sUVdKQ1VyaENFbzhXbEE=\">Ben Eater</span> 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13dkpjOUNaY3ZCYw==\">Learn how computers add numbers and build a 4 bit adder circuit</span></p>\n<p>影片透過觀察  <code>2進位制</code>  加法 的規律，歸納出了以下電路圖</p>\n<p><img data-src=\"https://i.imgur.com/6cbLa4f.png\" alt=\"\" /></p>\n<p>知道要怎麼接之後就簡單了<br />\n剩下的就只是把它實做出來而已<br />\n成品長這樣</p>\n<p><img data-src=\"https://i.imgur.com/caBdKaA.jpg\" alt=\"\" /></p>\n<p>01001 + 01100 的結果為 10101<br />\n 和實際操作的結果一樣</p>\n<p><img data-src=\"https://i.imgur.com/SK9QZdl.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "筆記"
            ]
        }
    ]
}