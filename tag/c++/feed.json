{
    "version": "https://jsonfeed.org/version/1",
    "title": "悠人的筆記本 • All posts by \"c++\" tag",
    "description": "CSE 筆記",
    "home_page_url": "https://yuto-0226.github.io",
    "items": [
        {
            "id": "https://yuto-0226.github.io/simple-8bit-cpu/",
            "url": "https://yuto-0226.github.io/simple-8bit-cpu/",
            "title": "用 C++ 模擬簡單的 8-bit cpu",
            "date_published": "2022-11-05T15:13:30.000Z",
            "content_html": "<p>最近在看 beneater 的 8-bit cpu 想說用 C++ 寫看看練練手，所以就寫出來啦～<br />\n 由於還沒對 CPU 理解得很徹底，只有把 ALU 做出來而已，以後再看看會不會在重寫一個哈哈。</p>\n<h1 id=\"架構\"><a class=\"anchor\" href=\"#架構\">#</a> 架構</h1>\n<ul>\n<li>accumulator register</li>\n<li>b register</li>\n<li>instruction register</li>\n<li>program counter</li>\n</ul>\n<h1 id=\"程式碼\"><a class=\"anchor\" href=\"#程式碼\">#</a> 程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> byte<span class=\"token operator\">=</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>byte accumulator<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accumulator register</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>byte b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// register b</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>byte instruction<span class=\"token punctuation\">;</span> <span class=\"token comment\">// instruction register</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>byte counter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// program counter</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">bool</span> negitive<span class=\"token punctuation\">;</span> <span class=\"token comment\">// negitive flag</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">bool</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sign flag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">bool</span> HLT<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>byte memory<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0b11110000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">bool</span> isDebug<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    accumulator<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    counter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    instruction<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> memory<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11110000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>HLT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    instruction<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">STA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x STA: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    accumulator<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">STB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x STB: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    b<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x ADD: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    b<span class=\"token operator\">=</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    accumulator<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">OUT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x OUT\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x\\n\"</span><span class=\"token punctuation\">,</span>accumulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    instruction<span class=\"token operator\">/=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x instruction: %#x\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0x0001</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// STA</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token function\">STA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0010</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// LDA</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0011</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// STB</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">STB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0100</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// LDB</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b0101</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// ADD</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1101</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// OUT</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">OUT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1110</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// HLT</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x HLT\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            HLT<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">0b1111</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// NOP</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#4x NOP\\n\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_register</span><span class=\"token punctuation\">(</span>byte reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span>reg<span class=\"token operator\">/</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        reg<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_memory</span><span class=\"token punctuation\">(</span>byte address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        memory<span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDebug<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%4#x  \"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4#x\\n\"</span><span class=\"token punctuation\">,</span>memory<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"register:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"accumulator\"</span><span class=\"token punctuation\">,</span>accumulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%14s %4#x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"instruction\"</span><span class=\"token punctuation\">,</span>instruction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// LDA   </span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b01010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ADD</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b00000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11010000</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// HLT</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    memory<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0b11100000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>HLT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\">// fetch</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//debug();</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/zj-e798/",
            "url": "https://yuto-0226.github.io/sol/zj-e798/",
            "title": "e798 卷積神經網路",
            "date_published": "2022-03-18T10:48:23.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>2019TOI1214 新手同好會 5. 卷積神經網路 (CNN)  {<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2ktcmVnLmNzaWUubnRudS5lZHUudHcvd3AtY29udGVudC91cGxvYWRzL3F1ZXN0aW9uLzIwMTkxMi1vbnNpdGUvNS1DTk4ucGRm\">試題連結</span>}</p>\n<h2 id=\"問題敘述\"><a class=\"anchor\" href=\"#問題敘述\">#</a> 問題敘述</h2>\n<p>卷積神經網絡 (Convolutional Neural Network) 簡稱 CNN，是現在最火紅的深度學習課程必教的模型。<br />\nCNN 在影像識別方面非常厲害，許多影像辨識的模型都是以 CNN 的架構為基礎去做延伸。<br />\nCNN 分為三個部分：卷積層 (convolution layer)、池化層 (pooling layer) 和全連接層 (fully connected layer)。<br />\n卷積層用於提取影像特徵，池化層減小資料的空間大小，全連接層主要目的為實現分類。<br />\n池化層最常見的作法是最大池化法 (max pooling)，它將輸入的影像劃分為若干個 2×2 的矩形子區域，對每個子區域輸出最大值。<br />\n給定一個 n×n 的二維陣列，請實作最大池化演算法並輸出池化後的結果。</p>\n<p><img data-src=\"https://zerojudge.tw/ShowImage?id=1442\" alt=\"\" /><br />\n<strong>最大池化法示意圖</strong><br />\n圖片來源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWJhcmMub3JnL2VtYmFyY19tbGkvZG9jL2J1aWxkL2h0bWwvTUxJX2tlcm5lbHMvcG9vbGluZ19tYXguaHRtbA==\">https://embarc.org/embarc_mli/doc/build/html/MLI_kernels/pooling_max.html</span></p>\n<h2 id=\"輸入格式\"><a class=\"anchor\" href=\"#輸入格式\">#</a> 輸入格式</h2>\n<p>第一行有一個正整數 n（4 &lt;= n &lt;= 20，n 為 2 的倍數），代表輸入影像邊長。接下去有 n 行，每行各有 n 個數字，數值範圍在正負 2^31 之間，以空白隔開，代表影像陣列中的資料值。</p>\n<h2 id=\"輸出格式\"><a class=\"anchor\" href=\"#輸出格式\">#</a> 輸出格式</h2>\n<p>輸出經 2x2 最大池化後的結果。</p>\n<h2 id=\"範例測資\"><a class=\"anchor\" href=\"#範例測資\">#</a> 範例測資</h2>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>輸入1 :</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>12 20 30 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8 12 2 0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>34 70 37 4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>112 100 25 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>輸出1 :</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>20 30</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>112 37</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>輸入2 :</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>6 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>10 2 0 12 1 3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>21 0 13 2 2 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>0 0 0 10 0 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>19 2 0 13 61 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>0 1 32 3 0 2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>9 2 0 31 11 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>輸出2 :</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>21 13 3</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>19 13 61</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>9 38 11</pre></td></tr></table></figure><h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>簡化題目後，我們可以得出題目是要我們把一個大矩陣都拆成 2*2 的小矩陣。然後把每個小矩陣的最大值輸出成一個新的矩陣，而這個過程被稱作池化。了解題目的要求後就簡單了，我的作法是以一個小區塊先池化，輸出後再處理下一個小區塊。</p>\n<p><img data-src=\"https://i.imgur.com/YCcYikU.png\" alt=\"\" /></p>\n<p>如下圖所示，而實際的方法可以把輸入的影像邊常除 2，再丟進迴圈裡跑。這樣迴圈每跑次就是處理一組小矩陣。<br />\n比較要注意的是後續處理比較四格大小的時候，要記得把迴圈索引值乘 2。</p>\n<p><img data-src=\"https://i.imgur.com/zXaq4ZH.png\" alt=\"\" /></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> pool<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cin<span class=\"token operator\">>></span>pool<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            max<span class=\"token operator\">=</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            max<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>pool<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>max<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "筆記",
                "ZeroJudge"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/sqrtx/",
            "url": "https://yuto-0226.github.io/sol/sqrtx/",
            "title": "[LeetCode] 69. Sqrt(x)(C++)",
            "date_published": "2022-03-04T11:50:42.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>Given a non-negative integer  <code>x</code> , compute and return the square root of  <code>x</code> .</p>\n<p>Since the return type is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result is returned.</p>\n<p><strong>Note:</strong> You are not allowed to use any built-in exponent function or operator, such as  <code>pow(x, 0.5)</code>  or  <code>x ** 0.5</code> .</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: x = 4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: 2</pre></td></tr></table></figure><p><strong>Example 2:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: x = 8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre></td></tr></table></figure><p><strong>Constraints:</strong></p>\n<ul>\n<li>0 &lt;= x &lt;= 231 - 1</li>\n</ul>\n<h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>連分數法求根號值，可以參考<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0dS5iZS9OWGV4a0p5UG9Rcz90PTI3\">李永樂老師的影片</span><br />\n可以得知 S=a^2+b 中的 a 會等於題目所求的答案</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">long</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">*</span>count<span class=\"token operator\">></span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            temp<span class=\"token operator\">=</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "筆記",
                "LeetCode"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/sol/two-sum/",
            "url": "https://yuto-0226.github.io/sol/two-sum/",
            "title": "[LeetCode] 1. Two-Sum(C++)",
            "date_published": "2022-03-04T11:32:42.000Z",
            "content_html": "<h1 id=\"題目\"><a class=\"anchor\" href=\"#題目\">#</a> 題目</h1>\n<p>Given an array of integers  <code>nums</code>  and an integer  <code>target</code> , return indices of the two numbers such that they add up to  <code>target</code> .</p>\n<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>\n<p>You can return the answer in any order.</p>\n<p><strong>Example 1</strong>:</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [2,7,11,15], target = 9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [0,1]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</pre></td></tr></table></figure><p><strong>Example 2:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [3,2,4], target = 6</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [1,2]</pre></td></tr></table></figure><p><strong>Example 3:</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Input: nums = [3,3], target = 6</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Output: [0,1]</pre></td></tr></table></figure><p><strong>Constraints:</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n<h1 id=\"解題方向\"><a class=\"anchor\" href=\"#解題方向\">#</a> 解題方向</h1>\n<p>用兩個  <code>for</code>  迴圈一個一個去檢查</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "筆記",
                "LeetCode"
            ]
        },
        {
            "id": "https://yuto-0226.github.io/csie/C++/cpp-vector/",
            "url": "https://yuto-0226.github.io/csie/C++/cpp-vector/",
            "title": "向量 Vector(STL)",
            "date_published": "2022-01-05T12:24:37.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在學寫 C++ 的過程當中，從 Array 到 Vector 一直是很難跨越的障礙，<br />\n因為我的物件導向和指標不是學的很完善，導致會有點看不懂程式碼在做什麼，<br />\n所以這次我透過邊實作邊學習的方式來盡量彌補我知識上的不足，<br />\n順便做個筆記來記錄。</p>\n<h1 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h1>\n<p>Vector 是 C++ 標準程式庫中的一個 class，可視為會自動擴展容量的陣列，<br />\n是 C++ 標準程式庫中的眾多容器 (container) 之一，以循序 (Sequential) 的方式維護變數集合，<br />\n使用前預先  <code>#include &lt;vector&gt;</code>  即可。</p>\n<h2 id=\"特色\"><a class=\"anchor\" href=\"#特色\">#</a> 特色</h2>\n<ul>\n<li>支援隨機存取</li>\n<li>集合尾端增刪元素很快：常數時間 O (1)</li>\n<li>集合中間增刪元素比較費時：線性時間 O (n)</li>\n<li>以模板 (泛型) 方式實現，可以儲存任意類型的變數，包括使用者自定義的資料型態。</li>\n</ul>\n<h1 id=\"成員函式\"><a class=\"anchor\" href=\"#成員函式\">#</a> 成員函式</h1>\n<p>vector 類別是以容器 (Container) 模式為基準設計的，也就是說，基本上它有  <code>begin()</code> 、 <code>end()</code> 、 <code>size()</code> 、 <code>max_size()</code> 、 <code>empty()</code>  以及  <code>swap()</code>  這幾個方法。</p>\n<h2 id=\"存取元素的方法\"><a class=\"anchor\" href=\"#存取元素的方法\">#</a> 存取元素的方法</h2>\n<ul>\n<li><code>v[i]</code>  : 存取索引值為 i 的元素值 (索引值從零起算，故第一個元素是 v [0]。)</li>\n<li><code>v.at(i)</code>  : 存取索引值為 i 的元素的值</li>\n<li><code>v.front()</code>  : 回傳 vector 第一個元素的值</li>\n<li><code>v.back()</code>  : 回傳 vector 最尾端元素的值</li>\n</ul>\n<blockquote>\n<p>用 operator  <code>[]</code>  可能會 <strong>Segmentation Fault</strong>。以  <code>at()</code>  存取會做<strong>陣列邊界檢查</strong>，如果存取越界將會拋出一個<strong>例外</strong>，這是與 operator  <code>[]</code>  的唯一差異。撰寫較嚴肅、安全性較高的程式時使用  <code>at()</code> 。</p>\n</blockquote>\n<h2 id=\"新增或移除元素的方法\"><a class=\"anchor\" href=\"#新增或移除元素的方法\">#</a> 新增或移除元素的方法</h2>\n<ul>\n<li><code>v.push_back()</code>  - 新增元素至 vector 的尾端，必要時會進行記憶體配置。</li>\n<li><code>v.pop_back()</code>  - 刪除 vector 最尾端的元素。</li>\n<li><code>v.insert()</code>  - 插入一個或多個元素至 vector 內的任意位置。</li>\n<li><code>v.erase()</code>  - 刪除 vector 中一個或多個元素。</li>\n<li><code>v.clear()</code>  - 清空所有元素。</li>\n</ul>\n<blockquote>\n<p>少依賴  <code>push_back()</code>  的自動記憶體配置，不是不要用  <code>push_back()</code> ，是不要讓  <code>push_back()</code>  自己判定記憶體需求，能自己要記憶體的就自己要，善用  <code>reserve()</code> 、 <code>resize()</code>  或建構子 (constructor) 引數。</p>\n</blockquote>\n<h2 id=\"取得長度容量\"><a class=\"anchor\" href=\"#取得長度容量\">#</a> 取得長度 / 容量</h2>\n<p><code>v.size()</code>  - 取得 vector 目前持有的元素個數。<br />\n <code>v.empty()</code>  - 如果 vector 內部為空，則傳回 true 值。<br />\n <code>v.capacity()</code>  - 取得 vector 目前可容納的最大元素個數。這個方法與記憶體的組態有關，它通常只會增加，不會因為元素被刪減而隨之減少。</p>\n<h2 id=\"重新組態重設長度\"><a class=\"anchor\" href=\"#重新組態重設長度\">#</a> 重新組態 / 重設長度</h2>\n<p><code>v.reserve()</code>  - 擴大 vector 的容量大小 (組態更多的記憶體)。<br />\n <code>v.resize()</code>  - 改變 vector 目前持有的元素個數。</p>\n<blockquote>\n<ul>\n<li><code>reserve()</code>  的目的是<strong>擴大容量</strong>。<br />\n做完時，vector 的長度不變，capacity 只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。因為 vector 一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。</li>\n<li><code>resize()</code>  的目的是<strong>改變 vector 的長度</strong>。<br />\n做完時，vector 的長度會改變為指定的大小，capacity 則視需要調整，確保不小於 size，資料所在位置可能會移動。如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。</li>\n</ul>\n</blockquote>\n<h2 id=\"迭代-iterator\"><a class=\"anchor\" href=\"#迭代-iterator\">#</a> 迭代 (Iterator)</h2>\n<p><code>v.begin()</code>  - 回傳一個 Iterator，它指向 vector 第一個元素。<br />\n <code>v.end()</code>  - 回傳一個 Iterator，它指向 vector 最尾端元素的下一個位置 (非最末元素)。<br />\n <code>v.rbegin()</code>  - 回傳一個反向 Iterator，它指向 vector 最尾端元素的。<br />\n <code>v.rend()</code>  - 回傳一個 Iterator，它指向 vector 的第一個元素的前一個位置。</p>\n<p><img data-src=\"https://i.imgur.com/LV9jk0s.png\" alt=\"\" /></p>\n<h1 id=\"使用-vector-實做\"><a class=\"anchor\" href=\"#使用-vector-實做\">#</a> 使用 vector 實做</h1>\n<p>在實際使用 vector 之前，我們必須先了解如何宣告 vector 變數。</p>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>以下即是宣告一個  <code>int</code>  型的 vector， <code>size()</code>  是 0,   <code>capacity()</code>  也是 0。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用萬用標頭檔 ( <code>&lt;bits/stdc++.h&gt;</code> ) 就可以不用再  <code>#include &lt;vector&gt;</code> 。</p>\n</blockquote>\n<p>在初始化時可以用用 operator  <code>=</code>  就把值丟進去，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或是使用建構子，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>若要從其他容器中把值複製過來可以用 operator  <code>=</code> ，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同樣地也可以用建構子，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>還可以從 array 裡複製過來，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>範圍複製也是可以的，vector 的可以這樣寫，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;3, 4&#125;</span></pre></td></tr></table></figure><p>array 的可以這樣寫，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;3, 4&#125;</span></pre></td></tr></table></figure><h2 id=\"存取元素的方法-2\"><a class=\"anchor\" href=\"#存取元素的方法-2\">#</a> 存取元素的方法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 4</span></pre></td></tr></table></figure><h2 id=\"新增或移除元素的方法-2\"><a class=\"anchor\" href=\"#新增或移除元素的方法-2\">#</a> 新增或移除元素的方法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;1, 2, 3, 4, 5&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;1, 2, 5, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 此時所有元素被清空，但 capacity 為 5</span></pre></td></tr></table></figure><h3 id=\"用-swap-刪除元素\"><a class=\"anchor\" href=\"#用-swap-刪除元素\">#</a> 用 swap () 刪除元素</h3>\n<p>成員函式 swap ()，這個函式用來交換兩個 vector 容器中的元素。<br />\n因此可以與一個具有相同資料類型的內容為空的局部變數 swap，從而實現徹底刪除元素、釋放容量的目的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//v1 內的元素與 v2 交換，即 v1 內所有元素被刪除</span></pre></td></tr></table></figure><h2 id=\"長度容量以及配置大小\"><a class=\"anchor\" href=\"#長度容量以及配置大小\">#</a> 長度 / 容量以及配置大小</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 把 capacity 擴大為 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// &#123;1, 2, 3, 4, 0, 0&#125;</span></pre></td></tr></table></figure><h2 id=\"尋訪元素\"><a class=\"anchor\" href=\"#尋訪元素\">#</a> 尋訪元素</h2>\n<p>尋訪元素除了像陣列那樣寫以外，還可以用疊代器寫</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"vectorassign\"><a class=\"anchor\" href=\"#vectorassign\">#</a> vector::assign()</h2>\n<p><code>vector::assign()</code>  是 C++ 中的 STL，它通過替換舊元素為向量元素分配新值。如果需要，它也可以修改向量的大小。</p>\n<h3 id=\"分配常量值\"><a class=\"anchor\" href=\"#分配常量值\">#</a> 分配常量值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;10, 10, 10, 10 ,10&#125;</span></pre></td></tr></table></figure><h3 id=\"從-array-或-vector-分配值\"><a class=\"anchor\" href=\"#從-array-或-vector-分配值\">#</a> 從 array 或 vector 分配值</h3>\n<p>除了上面有提過用 operator  <code>=</code>  或建構子的方式在初始化時賦值，<br />\n也可以透過  <code>assign()</code>  來執行。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;1, 2&#125;</span></pre></td></tr></table></figure><h3 id=\"修改-vector\"><a class=\"anchor\" href=\"#修改-vector\">#</a> 修改 vector</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// &#123;10, 10, 10, 10 ,10&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;10, 10, 10&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcm9wZW5nYXRlLmJsb2dzcG90LmNvbS8yMDE1LzA3L2NjLXZlY3Rvci1zdGwuaHRtbA==\">Mr. Opengate: C/C++ - Vector (STL) 用法與心得完全攻略</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXZlY3Rvci8=\">ShengYu Talk: C++ std::vector 用法與範例</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVmVjdG9yXyhTVEwp\">Wiki 維基百科: Vector (STL)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aW1za3kuY29tL3poLXR3L2V4YW1wbGVzL3VzYWdlL3ZlY3Rvci1hc3NpZ24taW4tYy1zdGwuaHRtbA==\">純淨天空: C++ vector::assign () 用法及代碼示例</span></li>\n</ul>\n",
            "tags": [
                "C++",
                "筆記",
                "vector"
            ]
        }
    ]
}